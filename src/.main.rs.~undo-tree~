(undo-tree-save-format-version . 1)
"0900d93ae0a6687bd2f3f4032453c91520e54fe0"
[nil nil nil nil (25815 54430 164983 499000) 0 nil]
([nil nil ((53 . 55) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -53) (#("path" 0 4 (fontified nil)) . 54) (53 . 54) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 53 55 nil nil nil t #s(yas--exit 56 nil))) #s(yas--exit 56 nil) 0 nil #s(yas--field 1 53 55 nil nil nil t #s(yas--exit 56 nil)) nil nil)) (48 . 58) (#("open(${1:path})$0" 0 17 (fontified nil)) . 48) (48 . 65) (#("op" 0 2 (fontified nil)) . 48) (48 . 50) (#("open(…)" 0 7 (fontified nil)) . -48) (48 . 55) (#("op" 0 2 (fontified t)) . -48) (undo-tree-id68 . -2) 50 (49 . 50) (#("o" 0 1 (fontified t)) . -49) (undo-tree-id69 . -1) 50 (46 . 50) (#("." 0 1 (fontified t)) . -46) (undo-tree-id70 . -1) 47 (46 . 47) (40 . 46) (#("Rea" 0 3 (fontified nil)) . 40) (40 . 43) (#("Reader" 0 6 (fontified nil)) . -40) (40 . 46) (#("Rea" 0 3 (fontified t face font-lock-type-face)) . -40) (undo-tree-id71 . -3) 43 (26 . 43) (17 . 26) (t 25815 53934 223597 895000)) nil (25815 54430 164982 319000) 0 nil])
([nil nil ((127 . 128) (apply yas--snippet-revive 123 128 #s(yas--snippet nil nil #s(yas--exit 127 nil) 8 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 127 nil) 8 nil nil nil nil)) (123 . 128) (#("Vec<$0>" 0 7 (fontified nil)) . 123) (123 . 130) (#("Vec" 0 3 (fontified nil)) . 123) (123 . 126) (#("Vec<…>" 0 6 (fontified nil)) . -123) (123 . 129) (#("Vec" 0 3 (fontified t face font-lock-type-face)) . -123) (undo-tree-id45 . -3) (undo-tree-id46 . -3) 126 (123 . 126) (120 . 124) (apply yas--snippet-revive 113 122 #s(yas--snippet nil nil #s(yas--exit 122 nil) 7 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 122 nil) 7 nil nil nil nil)) (113 . 122) (#("collect()$0" 0 11 (fontified nil)) . 113) (113 . 124) (#("coll" 0 4 (fontified nil)) . 113) (113 . 117) (#("collect() (as Iterator)" 0 23 (fontified nil)) . -113) (113 . 136) (#("coll" 0 4 (fontified t)) . -113) (undo-tree-id47 . -4) 117 (112 . 117) (apply yas--snippet-revive 104 112 #s(yas--snippet nil nil #s(yas--exit 112 nil) 6 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 112 nil) 6 nil nil nil nil)) (104 . 112) (#("pixels()$0" 0 10 (fontified nil)) . 104) (104 . 114) (#("pix" 0 3 (fontified nil)) . 104) (104 . 107) (#("pixels()" 0 8 (fontified nil)) . -104) (104 . 112) (#("pix" 0 3 (fontified t)) . -104) (undo-tree-id48 . -3) 107 (105 . 107) (#("u" 0 1 (fontified t)) . -105) (undo-tree-id49 . -1) 106 (104 . 106) (90 . 91) (90 . 91) (#("1" 0 1 (fontified t)) . -90) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (#("6" 0 1 (fontified t)) . -91) (undo-tree-id52 . -1) (undo-tree-id53 . -1) 92 (103 . 104) (apply yas--snippet-revive 95 103 #s(yas--snippet nil nil #s(yas--exit 103 nil) 5 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 103 nil) 5 nil nil nil nil)) (95 . 103) (#("unwrap()$0" 0 10 (fontified nil)) . 95) (95 . 105) (#("un" 0 2 (fontified nil)) . 95) (95 . 97) (#("unwrap()" 0 8 (fontified nil)) . -95) (95 . 103) (#("un" 0 2 (fontified t)) . -95) (undo-tree-id54 . -2) 97 (95 . 97) (#("i" 0 1 (fontified t)) . -95) (undo-tree-id55 . -1) 96 (94 . 96) (apply yas--snippet-revive 84 94 #s(yas--snippet nil nil #s(yas--exit 94 nil) 4 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 94 nil) 4 nil nil nil nil)) (84 . 94) (#("as_rgb16()$0" 0 12 (fontified nil)) . 84) (84 . 96) (#("as_rgb" 0 6 (fontified nil)) . 84) (84 . 90) (#("as_rgb16()" 0 10 (fontified nil)) . -84) (84 . 94) (#("as_rgb" 0 6 (fontified t)) . -84) (undo-tree-id56 . -6) 90 (88 . 90) (#("e" 0 1 (fontified t)) . -88) (undo-tree-id57 . -1) 89 (84 . 89) (#("t" 0 1 (fontified t)) . -84) (undo-tree-id58 . -1) (#("o" 0 1 (fontified t)) . -85) (undo-tree-id59 . -1) (#("_" 0 1 (fontified t)) . -86) (undo-tree-id60 . -1) 87 (84 . 87) (#("a" 0 1 (fontified t)) . -84) (undo-tree-id61 . -1) 85 (84 . 85) (83 . 84) (apply yas--snippet-revive 75 83 #s(yas--snippet nil nil #s(yas--exit 83 nil) 3 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 83 nil) 3 nil nil nil nil)) (75 . 83) (#("unwrap()$0" 0 10 (fontified nil)) . 75) (75 . 85) (#("un" 0 2 (fontified nil)) . 75) (75 . 77) (#("unwrap()" 0 8 (fontified nil)) . -75) (75 . 83) (#("un" 0 2 (fontified t)) . -75) (undo-tree-id62 . -2) 77 (76 . 77) (74 . 76) (apply yas--snippet-revive 66 74 #s(yas--snippet nil nil #s(yas--exit 74 nil) 2 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 74 nil) 2 nil nil nil nil)) (66 . 74) (#("decode()$0" 0 10 (fontified nil)) . 66) (66 . 76) (#("de" 0 2 (fontified nil)) . 66) (66 . 68) (#("decode()" 0 8 (fontified nil)) . -66) (66 . 74) (#("de" 0 2 (fontified t)) . -66) (undo-tree-id63 . -2) 68 (65 . 68) (apply yas--snippet-revive 57 65 #s(yas--snippet nil nil #s(yas--exit 65 nil) 1 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 65 nil) 1 nil nil nil nil)) (57 . 65) (#("unwrap()$0" 0 10 (fontified nil)) . 57) (57 . 67) (#("un" 0 2 (fontified nil)) . 57) (57 . 59) (#("unwrap()" 0 8 (fontified nil)) . -57) (57 . 65) (#("un" 0 2 (fontified t)) . -57) (undo-tree-id64 . -2) 59 (56 . 59) (#(" " 0 1 (fontified t)) . -56) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (#("." 0 1 (fontified t)) . -57) (undo-tree-id67 . -1) 58 (57 . 58) (apply yas--snippet-revive 48 56 #s(yas--snippet nil (#s(yas--field 1 53 55 nil nil nil t #s(yas--exit 56 nil))) #s(yas--exit 56 nil) 0 nil #s(yas--field 1 53 55 nil nil nil t #s(yas--exit 56 nil)) nil nil))) nil (25815 54430 164977 529000) 0 nil])
([nil nil ((132 . 133)) nil (25815 54430 164966 69000) 0 nil])
([nil nil ((21 . 26) (#("image" 0 5 (fontified t face font-lock-variable-name-face)) . 21) (undo-tree-id44 . -4) (t 25815 54173 941307 374000)) nil (25815 54430 164965 629000) 0 nil])
([nil nil ((26 . 27)) nil (25815 54430 164965 129000) 0 nil])
([nil nil ((85 . 87) (#("as" 0 2 (fontified t)) . 85) (undo-tree-id43 . -1) (t 25815 54235 41733 416000)) nil (25815 54430 164964 859000) 0 nil])
([nil nil ((85 . 87) (#("t" 0 1 (fontified t)) . -85) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (#("o" 0 1 (fontified t)) . -86) (undo-tree-id42 . -1) 87) nil (25815 54430 164964 309000) 0 nil])
([nil nil ((44 . 47) (41 . 44) (#("-" 0 1 (fontified t)) . -41) (undo-tree-id36 . -1) (#(">" 0 1 (fontified t syntax-table (1))) . -42) (undo-tree-id37 . -1) (#(" " 0 1 (fontified t)) . -43) (undo-tree-id38 . -1) 44 (41 . 44) (#("=" 0 1 (fontified t)) . -41) (undo-tree-id39 . -1) 42 (39 . 42) (33 . 38) (28 . 34) (26 . 28) (22 . 26) (#("    " 0 4 (fontified nil face (rainbow-delimiters-depth-1-face))) . 22) (22 . 26) (21 . 23) (1 . 22) (1 . 2) (t 25815 54252 209852 585000)) nil (25815 54430 164963 9000) 0 nil])
([nil nil ((1 . 2) (1 . 2) 20) nil (25815 54430 164961 129000) 0 nil])
([nil nil ((#("M" 0 1 (fontified t face font-lock-type-face)) . 9)) nil (25815 54430 164960 729000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . 9)) nil (25815 54430 164960 299000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . 9)) nil (25815 54430 164960 19000) 0 nil])
([nil nil ((36 . 41) (31 . 36) (25 . 31) (20 . 25) (16 . 20) (apply yas--snippet-revive 1 18 #s(yas--snippet nil (#s(yas--field 1 6 9 nil nil nil t #s(yas--exit 16 nil))) #s(yas--exit 16 nil) 9 nil #s(yas--field 1 6 9 nil nil nil t #s(yas--exit 16 nil)) nil nil)) (6 . 9) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6 9 nil nil nil t #s(yas--exit 16 nil))) #s(yas--exit 16 nil) 9 nil #s(yas--field 1 6 9 nil nil nil t #s(yas--exit 16 nil)) nil nil)) (1 . 15) (#("enum $1 {
    $0
}" 0 18 (fontified nil)) . 1) (1 . 19) (#("enu" 0 3 (fontified nil)) . 1) (1 . 4) (#("enum" 0 4 (fontified nil)) . -1) (1 . 5) (#("enu" 0 3 (fontified t)) . -1) (undo-tree-id32 . -3) 4 (1 . 4) (#("s" 0 1 (fontified t)) . -1) (undo-tree-id33 . -1) (#("t" 0 1 (fontified t)) . -2) (undo-tree-id34 . -1) (#("r" 0 1 (fontified t face font-lock-type-face)) . -3) (undo-tree-id35 . -1) 4 (1 . 4)) nil (25815 54430 164959 209000) 0 nil])
([nil nil ((97 . 100) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 92 92 nil nil nil t #s(yas--exit 96 nil))) #s(yas--exit 96 nil) 10 nil #s(yas--field 1 92 92 nil nil nil t #s(yas--exit 96 nil)) nil nil)) (92 . 106) (#("impl $1 {
    $0
}" 0 18 (fontified nil)) . 92) (92 . 110) (#("im" 0 2 (fontified nil)) . 92) (92 . 94) (#("impl" 0 4 (fontified nil)) . -92) (92 . 96) (#("im" 0 2 (fontified t)) . -92) (undo-tree-id31 . -2) 94 (92 . 94) (90 . 92) (224 . 229) (t 25815 54345 210494 222000) 112) nil (25815 54430 164956 929000) 0 nil])
([nil nil ((apply yas--snippet-revive 92 98 #s(yas--snippet nil (#s(yas--field 1 92 92 nil nil nil t #s(yas--exit 96 nil))) #s(yas--exit 96 nil) 10 nil #s(yas--field 1 92 92 nil nil nil t #s(yas--exit 96 nil)) nil nil)) (#("impl Com {
" 0 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t) 5 8 (fontified t face font-lock-type-face) 8 9 (fontified t) 9 10 (fontified t face (rainbow-delimiters-depth-1-face)) 10 11 (fontified t)) . 92) (undo-tree-id22 . 3) (undo-tree-id23 . -10) (undo-tree-id24 . -7) (undo-tree-id25 . 7) (undo-tree-id26 . -5) (undo-tree-id27 . 3) (undo-tree-id28 . -9) (undo-tree-id29 . -5) (undo-tree-id30 . 3) 99) nil (25815 54430 164955 589000) 0 nil])
([nil nil ((#("    
" 0 4 (fontified t) 4 5 (fontified t)) . 92) (undo-tree-id19 . 5) (undo-tree-id20 . -4) (undo-tree-id21 . -3) 95) nil (25815 54430 164952 679000) 0 nil])
([nil nil ((#("}
" 0 1 (fontified t face (rainbow-delimiters-unmatched-face)) 1 2 (fontified t)) . 92) (undo-tree-id15 . 2) (undo-tree-id16 . -1) (undo-tree-id17 . 2) (undo-tree-id18 . -1)) nil (25815 54430 164951 619000) 0 nil])
([nil nil ((126 . 130) (#("    " 0 4 (fontified nil face (rainbow-delimiters-depth-1-face))) . 126) (126 . 130) (125 . 127) (123 . 126) (120 . 122) (1 . 17) (1 . 3) (apply yas--snippet-revive 97 103 #s(yas--snippet nil nil #s(yas--exit 102 nil) 11 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 102 nil) 11 nil nil nil nil)) (97 . 103) (#("Rgba<$0>" 0 8 (fontified nil)) . 97) (97 . 105) (#("Rgba" 0 4 (fontified nil)) . 97) (97 . 101) (#("Rgba<…> (use image::Rgba)" 0 25 (fontified nil)) . -97) (97 . 122) (#("Rgba" 0 4 (fontified t face font-lock-type-face)) . -97) (undo-tree-id8 . -4) 101 (97 . 101) (92 . 97) (#("i" 0 1 (fontified t)) . -92) (undo-tree-id9 . -1) (#("m" 0 1 (fontified t)) . -93) (undo-tree-id10 . -1) (#("a" 0 1 (fontified t)) . -94) (undo-tree-id11 . -1) (#("g" 0 1 (fontified t)) . -95) (undo-tree-id12 . -1) (#("e" 0 1 (fontified t)) . -96) (undo-tree-id13 . -1) 97 (92 . 97) (#("im" 0 2 (fontified nil)) . 92) (92 . 94) (#("image" 0 5 (fontified nil)) . -92) (92 . 97) (#("im" 0 2 (fontified t)) . -92) (undo-tree-id14 . -2) 94 (92 . 94) (91 . 92) 91) nil (25815 54430 164949 659000) 0 nil])
([nil nil ((#("}
" 0 1 (fontified t face (rainbow-delimiters-depth-1-face)) 1 2 (fontified t)) . 131) (undo-tree-id5 . -1) (undo-tree-id6 . 2) (undo-tree-id7 . -1)) nil (25815 54430 164945 579000) 0 nil])
([nil nil ((126 . 127) (#("}" 0 1 (fontified nil)) . -126) (126 . 127)) nil (25815 54430 165309 722000) 0 nil])
([nil nil ((124 . 128) (115 . 124) (#("CO" 0 2 (fontified nil)) . 115) (115 . 117) (#("Component" 0 9 (fontified nil)) . -115) (115 . 124) (#("CO" 0 2 (fontified t face font-lock-type-face)) . -115) (undo-tree-id79 . -2) 117 (114 . 117) (126 . 130) (126 . 127) (t 25815 54415 758977 80000)) nil (25815 54546 355069 957000) 0 nil] [nil nil ((#("}    
" 0 1 (fontified t face (rainbow-delimiters-depth-1-face)) 1 6 (fontified t)) . 126) (undo-tree-id0 . 5) (undo-tree-id1 . -5) (undo-tree-id2 . -1) (undo-tree-id3 . 6) (undo-tree-id4 . -1) (t 25815 54415 758977 80000)) ((126 . 132)) (25815 54430 164942 459000) 0 nil])
([nil nil ((192 . 193) (190 . 191) (186 . 191) (173 . 186) (#("i" 0 1 (fontified t)) . -173) (undo-tree-id75 . -1) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -174) (undo-tree-id76 . -1) (#(" " 0 1 (fontified t)) . -175) (undo-tree-id77 . -1) 176 (173 . 176) (apply yas--snippet-revive 143 178 #s(yas--snippet nil nil #s(yas--exit 173 nil) 12 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 173 nil) 12 nil nil nil nil)) (143 . 178) (#("fn max(&self) -> RGB {
       $0
   }" 0 15 (fontified nil) 15 16 (fontified nil syntax-table (1)) 16 37 (fontified nil)) . 143) (176 . 179) (170 . 173) (143 . 174) (#("fn" 0 2 (fontified nil)) . 143) (143 . 145) (#("fn max(..)" 0 10 (fontified nil)) . -143) (143 . 153) (#("fn" 0 2 (fontified t face font-lock-keyword-face)) . -143) (undo-tree-id78 . -2) 145 (143 . 145)) nil (25815 54546 355067 367000) 0 nil])
nil
([nil nil ((nil rear-nonsticky nil 200 . 201) (#("
" 0 1 (fontified nil)) . -221) (193 . 222) 192) nil (25815 54546 355063 787000) 0 nil])
([nil nil ((205 . 210) (#("b" 0 1 (fontified t face font-lock-variable-name-face)) . -205) (undo-tree-id73 . -1) 206 (205 . 206) (#("red" 0 3 (fontified t face font-lock-variable-name-face)) . 205) (undo-tree-id74 . -2)) nil (25815 54546 355062 977000) 0 nil])
([nil nil ((220 . 221) (#("0" 0 1 (fontified t)) . -220) (undo-tree-id72 . -1) 221) nil (25815 54546 355061 127000) 0 nil])
([nil nil ((220 . 221) (#("0" 0 1 (fontified t)) . 220)) nil (25815 54546 355053 317000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -253) (223 . 254) 220 (t 25815 54546 807866 688000)) nil (25815 54554 470892 432000) 0 nil])
([nil nil ((235 . 239) (#("green" 0 5 (fontified t face font-lock-variable-name-face)) . 235) (undo-tree-id80 . -4)) nil (25815 54554 470891 712000) 0 nil])
([nil nil ((249 . 250) (#("1" 0 1 (fontified t)) . 249)) nil (25815 54554 470882 752000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -305) (undo-tree-id105 . -1) 306 (305 . 306) (apply yas--snippet-revive 302 305 #s(yas--snippet nil nil #s(yas--exit 305 nil) 13 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 305 nil) 13 nil nil nil nil)) (302 . 305) (#("RED$0" 0 5 (fontified nil)) . 302) (302 . 307) (#("R" 0 1 (fontified nil)) . 302) (302 . 303) (#("RED" 0 3 (fontified nil)) . -302) (302 . 305) (#("R" 0 1 (fontified t face font-lock-type-face)) . -302) (undo-tree-id106 . -1) 303 (297 . 303) (293 . 297) (294 . 301) (#("	   " 0 4 (fontified nil face (rainbow-delimiters-depth-3-face))) . 293) (293 . 297) (292 . 294) (283 . 293) (#("&" 0 1 (fontified t)) . -283) (undo-tree-id107 . -1) (#("&" 0 1 (fontified t)) . -284) (undo-tree-id108 . -1) (#(" " 0 1 (fontified t)) . -285) (undo-tree-id109 . -1) 286 (277 . 286) (275 . 277) (270 . 275) (#("gre" 0 3 (fontified nil)) . 270) (270 . 273) (#("green" 0 5 (fontified nil)) . -270) (270 . 275) (#("gre" 0 3 (fontified t)) . -270) (undo-tree-id110 . -3) 273 (271 . 273) (#("e" 0 1 (fontified t)) . -271) (undo-tree-id111 . -1) (#("r" 0 1 (fontified t)) . -272) (undo-tree-id112 . -1) (#("e" 0 1 (fontified t)) . -273) (undo-tree-id113 . -1) 274 (260 . 274) (#("i" 0 1 (fontified t)) . -260) (undo-tree-id114 . -1) 261 (260 . 261) (252 . 260) (t 25815 54554 499918 647000) 249) nil (25815 54748 501990 85000) 0 nil])
([nil nil ((apply yas--snippet-revive 402 406 #s(yas--snippet nil nil #s(yas--exit 406 nil) 15 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 406 nil) 15 nil nil nil nil)) (402 . 406) (#("BLUE$0" 0 6 (fontified nil)) . 402) (402 . 408) (#("BLUE" 0 4 (fontified nil)) . -402) (402 . 406) (398 . 402) (#("E" 0 1 (fontified t face font-lock-type-face)) . -398) (undo-tree-id81 . -1) (#("D" 0 1 (fontified t face font-lock-type-face)) . -399) (undo-tree-id82 . -1) (#(":" 0 1 (fontified t)) . -400) (undo-tree-id83 . -1) (#(":" 0 1 (fontified t)) . -401) (undo-tree-id84 . -1) (#("B" 0 1 (fontified t face font-lock-type-face)) . -402) (undo-tree-id85 . -1) (#("L" 0 1 (fontified t face font-lock-type-face)) . -403) (undo-tree-id86 . -1) (#("U" 0 1 (fontified t face font-lock-type-face)) . -404) (undo-tree-id87 . -1) (#("E" 0 1 (fontified t face font-lock-type-face)) . -405) (undo-tree-id88 . -1) 406 (397 . 406) (393 . 397) (394 . 401) (#("	   " 0 4 (fontified nil face (rainbow-delimiters-depth-3-face))) . 393) (393 . 397) (392 . 394) (386 . 393) (385 . 386) (#("
" 0 1 (fontified t)) . -385) (undo-tree-id89 . -1) (#(" " 0 1 (fontified t)) . -386) (undo-tree-id90 . -1) (#(" " 0 1 (fontified t)) . -387) (undo-tree-id91 . -1) (#(" " 0 1 (fontified t)) . -388) (undo-tree-id92 . -1) (#(" " 0 1 (fontified t)) . -389) (undo-tree-id93 . -1) (#(" " 0 1 (fontified t)) . -390) (undo-tree-id94 . -1) (#(" " 0 1 (fontified t)) . -391) (undo-tree-id95 . -1) (#(" " 0 1 (fontified t)) . -392) (undo-tree-id96 . -1) 393 (385 . 393) (apply yas--snippet-revive 371 376 #s(yas--snippet nil nil #s(yas--exit 376 nil) 14 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 376 nil) 14 nil nil nil nil)) (371 . 376) (#("GREEN$0" 0 7 (fontified nil)) . 371) (371 . 378) (#("GREEN" 0 5 (fontified nil)) . -371) (371 . 376) (367 . 371) (#("E" 0 1 (fontified t face font-lock-type-face)) . -367) (undo-tree-id97 . -1) (#("G" 0 1 (fontified t face font-lock-type-face)) . -368) (undo-tree-id98 . -1) (#(":" 0 1 (fontified t)) . -369) (undo-tree-id99 . -1) (#(":" 0 1 (fontified t)) . -370) (undo-tree-id100 . -1) 371 (366 . 371) (362 . 366) (363 . 370) (#("	   " 0 4 (fontified nil face (rainbow-delimiters-depth-3-face))) . 362) (362 . 366) (361 . 363) (346 . 362) (#("r" 0 1 (fontified t)) . -346) (undo-tree-id101 . -1) (#("e" 0 1 (fontified t)) . -347) (undo-tree-id102 . -1) (#("d" 0 1 (fontified t)) . -348) (undo-tree-id103 . -1) 349 (348 . 349) (#("g" 0 1 (fontified t)) . -348) (undo-tree-id104 . -1) 349 (330 . 349) (322 . 330) (314 . 322) 313) nil (25815 54748 501982 175000) 0 nil])
([nil nil ((129 . 137) (125 . 129) (120 . 125) (119 . 120) (#("m" 0 1 (fontified t)) . -119) (undo-tree-id115 . -1) 120 (107 . 120) (102 . 107) (101 . 102) (96 . 101) (#("us" 0 2 (fontified nil)) . 96) (96 . 98) (#("usize" 0 5 (fontified nil)) . -96) (96 . 101) (#("us" 0 2 (fontified t)) . -96) (undo-tree-id116 . -2) 98 (95 . 98) (91 . 95) (87 . 91) (#("    " 0 4 (fontified nil face (rainbow-delimiters-depth-1-face))) . 87) (87 . 91) (86 . 88) (73 . 87) (71 . 73) (#("i" 0 1 (fontified t face font-lock-type-face)) . -71) (undo-tree-id117 . -1) 72 (63 . 72) (63 . 64) (62 . 63) (t 25815 54748 954089 659000) 62) nil (25815 54954 813385 988000) 0 nil])
([nil nil ((694 . 699) (695 . 696) (#("	    " 0 5 (fontified nil face (rainbow-delimiters-depth-3-face))) . 694) (694 . 699) (693 . 695) (691 . 694) (apply yas--snippet-revive 686 691 #s(yas--snippet nil nil #s(yas--exit 691 nil) 16 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 691 nil) 16 nil nil nil nil)) (686 . 691) (#("max()$0" 0 7 (fontified nil)) . 686) (686 . 693) (#("ma" 0 2 (fontified nil)) . 686) (686 . 688) (#("max() (as Component)" 0 20 (fontified nil)) . -686) (686 . 706) (#("ma" 0 2 (fontified t)) . -686) (undo-tree-id118 . -2) 688 (675 . 688) (674 . 675) (673 . 674) (674 . 678) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 673) (673 . 674) (672 . 674) (670 . 673) (663 . 670) (#(" " 0 1 (fontified t)) . -663) (undo-tree-id119 . -1) (undo-tree-id120 . -1) 664 (644 . 664) (639 . 644) (t 25815 54955 209375 885000) 532) nil (25815 55015 365293 647000) 0 nil])
([nil nil ((698 . 707) (693 . 698) (#("gree" 0 4 (fontified nil)) . 693) (693 . 697) (#("green" 0 5 (fontified nil)) . -693) (693 . 698) (#("gree" 0 4 (fontified t)) . -693) (undo-tree-id135 . -4) (undo-tree-id136 . -4) 697 (693 . 697) (687 . 693) (686 . 688) (672 . 686) (#("Com" 0 3 (fontified nil)) . 672) (672 . 675) (#("ComponentCount" 0 14 (fontified nil)) . -672) (672 . 686) (#("Com" 0 3 (fontified t face font-lock-type-face)) . -672) (undo-tree-id137 . -3) 675 (672 . 675) (652 . 672) (#("c" 0 1 (fontified t face font-lock-variable-name-face)) . -652) (undo-tree-id138 . -1) (#("o" 0 1 (fontified t face font-lock-variable-name-face)) . -653) (undo-tree-id139 . -1) 654 (651 . 654) (#("c" 0 1 (fontified t face font-lock-variable-name-face)) . -651) (undo-tree-id140 . -1) 652 (649 . 652) (#("c" 0 1 (fontified t face font-lock-variable-name-face)) . -649) (undo-tree-id141 . -1) (#("o" 0 1 (fontified t face font-lock-variable-name-face)) . -650) (undo-tree-id142 . -1) (#("m" 0 1 (fontified t face font-lock-variable-name-face)) . -651) (undo-tree-id143 . -1) (#("p" 0 1 (fontified t face font-lock-variable-name-face)) . -652) (undo-tree-id144 . -1) (#("o" 0 1 (fontified t face font-lock-variable-name-face)) . -653) (undo-tree-id145 . -1) (#("n" 0 1 (fontified t face font-lock-variable-name-face)) . -654) (undo-tree-id146 . -1) (#("e" 0 1 (fontified t face font-lock-variable-name-face)) . -655) (undo-tree-id147 . -1) (#("n" 0 1 (fontified t face font-lock-variable-name-face)) . -656) (undo-tree-id148 . -1) (#("t" 0 1 (fontified t face font-lock-variable-name-face)) . -657) (undo-tree-id149 . -1) (#("_" 0 1 (fontified t face font-lock-variable-name-face)) . -658) (undo-tree-id150 . -1) (#("c" 0 1 (fontified t face font-lock-variable-name-face)) . -659) (undo-tree-id151 . -1) (#("o" 0 1 (fontified t face font-lock-variable-name-face)) . -660) (undo-tree-id152 . -1) (#("u" 0 1 (fontified t face font-lock-variable-name-face)) . -661) (undo-tree-id153 . -1) (#("n" 0 1 (fontified t face font-lock-variable-name-face)) . -662) (undo-tree-id154 . -1) (#("t" 0 1 (fontified t face font-lock-variable-name-face)) . -663) (undo-tree-id155 . -1) (#("s" 0 1 (fontified t face font-lock-variable-name-face)) . -664) (undo-tree-id156 . -1) 665 (649 . 665) (645 . 649) (641 . 645) (522 . 523) (639 . 640) (706 . 709) (apply yas--snippet-revive 703 706 #s(yas--snippet nil nil #s(yas--exit 706 nil) 17 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 706 nil) 17 nil nil nil nil)) (703 . 706) (#("RED$0" 0 5 (fontified nil)) . 703) (703 . 708) (#("R" 0 1 (fontified nil)) . 703) (703 . 704) (#("RED" 0 3 (fontified nil)) . -703) (703 . 706) (#("R" 0 1 (fontified t face font-lock-type-face)) . -703) (undo-tree-id157 . -1) 704 (698 . 704) (t 25815 55015 754227 20000)) nil (25815 55128 499097 22000) 0 nil])
([nil nil ((708 . 709)) nil (25815 55128 499052 612000) 0 nil])
([nil nil ((648 . 652)) nil (25815 55128 499052 212000) 0 nil])
([nil nil ((917 . 919) (#("1" 0 1 (fontified t)) . -917) (undo-tree-id121 . -1) 918 (915 . 918) (911 . 915) (#("b" 0 1 (fontified nil)) . 911) (911 . 912) (#("blue" 0 4 (fontified nil)) . -911) (911 . 915) (#("b" 0 1 (fontified t)) . -911) (undo-tree-id122 . -1) 912 (910 . 912) (890 . 910) (#("ma" 0 2 (fontified nil)) . 890) (890 . 892) (#("max_component_counts" 0 20 (fontified nil)) . -890) (890 . 910) (#("ma" 0 2 (fontified t)) . -890) (undo-tree-id123 . -2) 892 (890 . 892) (885 . 891) (apply yas--snippet-revive 876 885 #s(yas--snippet nil nil #s(yas--exit 885 nil) 19 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 885 nil) 19 nil nil nil nil)) (876 . 885) (#("RGB::BLUE$0" 0 11 (fontified nil)) . 876) (876 . 887) (#("RGB" 0 3 (fontified nil)) . 876) (876 . 879) (#("RGB::BLUE" 0 9 (fontified nil)) . -876) (876 . 885) (#("RGB" 0 3 (fontified t face font-lock-type-face)) . -876) (undo-tree-id124 . -3) 879 (876 . 879) (870 . 876) (869 . 870) (867 . 868) (#(" " 0 1 (fontified t)) . -867) (undo-tree-id125 . -1) (#("1" 0 1 (fontified t)) . -868) (undo-tree-id126 . -1) 869 (864 . 869) (859 . 864) (#("gr" 0 2 (fontified nil)) . 859) (859 . 861) (#("green" 0 5 (fontified nil)) . -859) (859 . 864) (#("gr" 0 2 (fontified t)) . -859) (undo-tree-id127 . -2) 861 (858 . 861) (#(" " 0 1 (fontified t)) . -858) (undo-tree-id128 . -1) 859 (858 . 859) (838 . 858) (#("max" 0 3 (fontified nil)) . 838) (838 . 841) (#("max_component_counts" 0 20 (fontified nil)) . -838) (838 . 858) (#("max" 0 3 (fontified t)) . -838) (undo-tree-id129 . -3) 841 (838 . 841) (833 . 839) (apply yas--snippet-revive 828 833 #s(yas--snippet nil nil #s(yas--exit 833 nil) 18 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 833 nil) 18 nil nil nil nil)) (828 . 833) (#("GREEN$0" 0 7 (fontified nil)) . 828) (828 . 835) (#("GRE" 0 3 (fontified nil)) . 828) (828 . 831) (#("GREEN" 0 5 (fontified nil)) . -828) (828 . 833) (#("GRE" 0 3 (fontified t face font-lock-type-face)) . -828) (undo-tree-id130 . -3) 831 (823 . 831) (817 . 823) (816 . 817) (812 . 815) (810 . 812) (807 . 810) (#("re" 0 2 (fontified nil)) . 807) (807 . 809) (#("red" 0 3 (fontified nil)) . -807) (807 . 810) (#("re" 0 2 (fontified t)) . -807) (undo-tree-id131 . -2) 809 (806 . 809) (#(" " 0 1 (fontified t)) . -806) (undo-tree-id132 . -1) 807 (806 . 807) (786 . 806) (#("max" 0 3 (fontified nil)) . 786) (786 . 789) (#("max_component_counts" 0 20 (fontified nil)) . -786) (786 . 806) (#("max" 0 3 (fontified t)) . -786) (undo-tree-id133 . -3) 789 (786 . 789) (772 . 773) (784 . 786) (#("p" 0 1 (fontified t)) . -784) (undo-tree-id134 . -1) 785 (784 . 785)) nil (25815 55128 499047 772000) 0 nil])
([nil nil ((591 . 592) (t 25815 55128 935710 693000)) nil (25815 55150 700581 109000) 0 nil])
([nil nil ((591 . 593) (#("was" 0 3 (fontified t)) . 591) (undo-tree-id158 . 2) (undo-tree-id159 . -2)) nil (25815 55150 700579 39000) 0 nil])
([nil nil ((#("unwrap().pixels().collect::<Vec<_>>();" 0 6 (fontified t) 6 7 (fontified t face (rainbow-delimiters-depth-2-face)) 7 8 (fontified t face (rainbow-delimiters-depth-2-face)) 8 9 (fontified t) 9 15 (fontified t) 15 16 (fontified t face (rainbow-delimiters-depth-2-face)) 16 17 (fontified t face (rainbow-delimiters-depth-2-face)) 17 18 (fontified t) 18 25 (fontified t) 25 27 (fontified t) 27 28 (fontified t face (rainbow-delimiters-depth-2-face)) 28 31 (fontified t face font-lock-type-face) 31 32 (fontified t face (rainbow-delimiters-depth-3-face)) 32 33 (fontified t) 33 34 (fontified t face (rainbow-delimiters-depth-3-face)) 34 35 (fontified t face (rainbow-delimiters-depth-2-face)) 35 36 (fontified t face (rainbow-delimiters-depth-2-face)) 36 37 (fontified t face (rainbow-delimiters-depth-2-face)) 37 38 (fontified t)) . 602) (undo-tree-id170 . -37) (undo-tree-id171 . -9) (undo-tree-id172 . -38) (undo-tree-id173 . -6) (undo-tree-id174 . -6) (t 25815 55151 167987 663000)) nil (25815 55162 961912 200000) 0 nil])
([nil nil ((601 . 602) (#("." 0 1 (fontified t)) . -601) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) 602) nil (25815 55162 961886 960000) 0 nil])
([nil nil ((630 . 632) (apply yas--snippet-revive 625 631 #s(yas--snippet nil nil #s(yas--exit 630 nil) 22 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 630 nil) 22 nil nil nil nil)) (625 . 631) (#("Rgba<$0>" 0 8 (fontified nil)) . 625) (625 . 633) (#("Rgba" 0 4 (fontified nil)) . 625) (625 . 629) (#("Rgba<…>" 0 7 (fontified nil)) . -625) (625 . 632) (#("Rgba" 0 4 (fontified t face font-lock-type-face)) . -625) (undo-tree-id175 . -4) (undo-tree-id176 . -4) 629 (625 . 629) (621 . 626) (#(">" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -621) (621 . 622) (618 . 622) (apply yas--snippet-revive 611 620 #s(yas--snippet nil nil #s(yas--exit 620 nil) 21 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 620 nil) 21 nil nil nil nil)) (611 . 620) (#("collect()$0" 0 11 (fontified nil)) . 611) (611 . 622) (#("col" 0 3 (fontified nil)) . 611) (611 . 614) (#("collect() (as Iterator)" 0 23 (fontified nil)) . -611) (611 . 634) (#("col" 0 3 (fontified t)) . -611) (undo-tree-id177 . -3) 614 (610 . 614) (apply yas--snippet-revive 602 610 #s(yas--snippet nil nil #s(yas--exit 610 nil) 20 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 610 nil) 20 nil nil nil nil)) (602 . 610) (#("pixels()$0" 0 10 (fontified nil)) . 602) (602 . 612) (#("p" 0 1 (fontified nil)) . 602) (602 . 603) (#("pixels()" 0 8 (fontified nil)) . -602) (602 . 610) (#("p" 0 1 (fontified t)) . -602) (undo-tree-id178 . -1) 603 (601 . 603) (t 25815 55162 992133 214000)) nil (25815 55191 850872 925000) 0 nil])
([nil nil ((#(".pixels().collect::<Vec<Rgba<u8>>>();" 0 1 (fontified t) 1 7 (fontified t) 7 8 (fontified t face (rainbow-delimiters-depth-2-face)) 8 9 (fontified t face (rainbow-delimiters-depth-2-face)) 9 10 (fontified t) 10 17 (fontified t) 17 19 (fontified t) 19 20 (fontified t face (rainbow-delimiters-depth-2-face)) 20 23 (fontified t face font-lock-type-face) 23 24 (fontified t face (rainbow-delimiters-depth-3-face)) 24 28 (fontified t face font-lock-type-face) 28 29 (fontified t face (rainbow-delimiters-depth-4-face)) 29 31 (fontified t face font-lock-type-face) 31 32 (fontified t face (rainbow-delimiters-depth-4-face)) 32 33 (fontified t face (rainbow-delimiters-depth-3-face)) 33 34 (fontified t face (rainbow-delimiters-depth-2-face)) 34 35 (fontified t face (rainbow-delimiters-depth-2-face)) 35 36 (fontified t face (rainbow-delimiters-depth-2-face)) 36 37 (fontified t)) . 601) (undo-tree-id180 . 6) (undo-tree-id181 . -36) (undo-tree-id182 . -24) (undo-tree-id183 . 6) (undo-tree-id184 . -10) (undo-tree-id185 . -17) (t 25815 55192 248488 319000)) nil (25815 55208 526768 723000) 0 nil])
([nil nil ((610 . 611) (apply yas--snippet-revive 602 610 #s(yas--snippet nil nil #s(yas--exit 610 nil) 23 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 610 nil) 23 nil nil nil nil)) (602 . 610) (#("pixels()$0" 0 10 (fontified nil)) . 602) (602 . 612) (#("p" 0 1 (fontified nil)) . 602) (602 . 603) (#("pixels()" 0 8 (fontified nil)) . -602) (602 . 610) (#("p" 0 1 (fontified t)) . -602) (undo-tree-id179 . -1) 603 (601 . 603)) nil (25815 55208 526764 283000) 0 nil])
([nil nil ((apply yas--snippet-revive 611 620 #s(yas--snippet nil nil #s(yas--exit 620 nil) 24 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 620 nil) 24 nil nil nil nil)) (611 . 620) (#("collect()$0" 0 11 (fontified nil)) . 611) (611 . 622) (#("co" 0 2 (fontified nil)) . 611) (611 . 613) (#("collect() (as Iterator)" 0 23 (fontified nil)) . -611) (611 . 634) (#("co" 0 2 (fontified t)) . -611) (undo-tree-id186 . -2) 613 (610 . 613) (t 25815 55208 532682 983000)) nil (25815 55219 801195 391000) 0 nil])
([nil nil ((625 . 626) (apply yas--snippet-revive 621 626 #s(yas--snippet nil nil #s(yas--exit 625 nil) 25 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 625 nil) 25 nil nil nil nil)) (621 . 626) (#("Vec<$0>" 0 7 (fontified nil)) . 621) (621 . 628) (#("Vec" 0 3 (fontified nil)) . 621) (621 . 624) (#("Vec<…>" 0 6 (fontified nil)) . -621) (621 . 627) (#("Vec" 0 3 (fontified t face font-lock-type-face)) . -621) (undo-tree-id187 . -3) (undo-tree-id188 . -3) 624 (621 . 624) (618 . 622) (t 25815 55219 808816 574000)) nil (25815 55230 57220 293000) 0 nil])
([nil nil ((527 . 532) (#("pixels" 0 6 (fontified t face font-lock-variable-name-face)) . 527) (undo-tree-id197 . -5) (t 25815 55230 80937 432000)) nil (25815 55264 53390 197000) 0 nil])
([nil nil ((#(".pixels().collect::<Vec<_>>();" 0 1 (fontified t) 1 7 (fontified t) 7 8 (fontified t face (rainbow-delimiters-depth-2-face)) 8 9 (fontified t face (rainbow-delimiters-depth-2-face)) 9 10 (fontified t) 10 17 (fontified t) 17 19 (fontified t) 19 20 (fontified t face (rainbow-delimiters-depth-2-face)) 20 23 (fontified t face font-lock-type-face) 23 24 (fontified t face (rainbow-delimiters-depth-3-face)) 24 25 (fontified t) 25 26 (fontified t face (rainbow-delimiters-depth-3-face)) 26 27 (fontified t face (rainbow-delimiters-depth-2-face)) 27 28 (fontified t face (rainbow-delimiters-depth-2-face)) 28 29 (fontified t face (rainbow-delimiters-depth-2-face)) 29 30 (fontified t)) . 600) (undo-tree-id195 . -29) (undo-tree-id196 . -1)) nil (25815 55264 53389 607000) 0 nil])
([nil nil ((600 . 601)) nil (25815 55264 53388 507000) 0 nil])
([nil nil ((648 . 649) (apply yas--snippet-revive 644 649 #s(yas--snippet nil nil #s(yas--exit 648 nil) 28 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 648 nil) 28 nil nil nil nil)) (644 . 649) (#("Vec<$0>" 0 7 (fontified nil)) . 644) (644 . 651) (#("Vec" 0 3 (fontified nil)) . 644) (644 . 647) (#("Vec<…>" 0 6 (fontified nil)) . -644) (644 . 650) (#("Vec" 0 3 (fontified t face font-lock-type-face)) . -644) (undo-tree-id189 . -3) (undo-tree-id190 . -3) 647 (644 . 647) (641 . 645) (apply yas--snippet-revive 634 643 #s(yas--snippet nil nil #s(yas--exit 643 nil) 27 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 643 nil) 27 nil nil nil nil)) (634 . 643) (#("collect()$0" 0 11 (fontified nil)) . 634) (634 . 645) (#("coll" 0 4 (fontified nil)) . 634) (634 . 638) (#("collect() (as Iterator)" 0 23 (fontified nil)) . -634) (634 . 657) (#("coll" 0 4 (fontified t)) . -634) (undo-tree-id191 . -4) 638 (633 . 638) (apply yas--snippet-revive 625 633 #s(yas--snippet nil nil #s(yas--exit 633 nil) 26 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 633 nil) 26 nil nil nil nil)) (625 . 633) (#("pixels()$0" 0 10 (fontified nil)) . 625) (625 . 635) (#("p" 0 1 (fontified nil)) . 625) (625 . 626) (#("pixels()" 0 8 (fontified nil)) . -625) (625 . 633) (#("p" 0 1 (fontified t)) . -625) (undo-tree-id192 . -1) 626 (624 . 626) (619 . 624) (#("ima" 0 3 (fontified nil)) . 619) (619 . 622) (#("image" 0 5 (fontified nil)) . -619) (619 . 624) (#("ima" 0 3 (fontified t)) . -619) (undo-tree-id193 . -3) 622 (613 . 622) (606 . 613) (#("k" 0 1 (fontified t)) . -606) (undo-tree-id194 . -1) 607 (606 . 607) (601 . 606) 600) nil (25815 55264 53387 77000) 0 nil])
([nil nil ((653 . 654)) nil (25815 55264 53366 397000) 0 nil])
([nil nil ((526 . 540) (#("Com" 0 3 (fontified nil)) . 526) (undo-tree-id198 . -3) (526 . 529) (#("ComponentCount" 0 14 (fontified nil)) . -526) (undo-tree-id199 . -14) (526 . 540) (#("Com" 0 3 (fontified t face font-lock-type-face)) . -526) (undo-tree-id200 . -3) (undo-tree-id201 . -3) 529 (527 . 529) (526 . 527) (521 . 526) (512 . 521) (#("COm" 0 3 (fontified nil)) . 512) (undo-tree-id202 . -3) (512 . 515) (#("Component" 0 9 (fontified nil)) . -512) (undo-tree-id203 . -9) (512 . 521) (#("COm" 0 3 (fontified t face font-lock-type-face)) . -512) (undo-tree-id204 . -3) (undo-tree-id205 . -3) 515 (512 . 515) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 512 540 nil nil nil t #s(yas--exit 547 nil))) #s(yas--exit 547 nil) 29 nil #s(yas--field 1 512 540 nil nil nil t #s(yas--exit 547 nil)) nil nil)) (507 . 521) (#("impl $1 {
    $0
}" 0 18 (fontified nil)) . 507) (507 . 525) (#("im" 0 2 (fontified nil)) . 507) (507 . 509) (#("impl" 0 4 (fontified nil)) . -507) (507 . 511) (#("im" 0 2 (fontified t)) . -507) (undo-tree-id206 . -2) 509 (507 . 509) (506 . 507) (505 . 506) (t 25815 55264 81331 970000) 504) nil (25815 55380 480690 34000) 0 nil])
([nil nil ((apply yas--snippet-revive 507 549 #s(yas--snippet nil (#s(yas--field 1 512 540 nil nil nil t #s(yas--exit 547 nil))) #s(yas--exit 547 nil) 29 nil #s(yas--field 1 512 540 nil nil nil t #s(yas--exit 547 nil)) nil nil))) nil (25815 55543 602959 101000) 0 nil])
([nil nil ((754 . 762) (753 . 754) (749 . 753) (750 . 757) (#("	   " 0 4 (fontified nil face (rainbow-delimiters-depth-3-face))) . 749) (749 . 753) (748 . 750) (741 . 749) (#("
" 0 1 (fontified t)) . -741) (undo-tree-id207 . -1) (#(" " 0 1 (fontified t)) . -742) (undo-tree-id208 . -1) (#(" " 0 1 (fontified t)) . -743) (undo-tree-id209 . -1) (#(" " 0 1 (fontified t)) . -744) (undo-tree-id210 . -1) (#(" " 0 1 (fontified t)) . -745) (undo-tree-id211 . -1) (#(" " 0 1 (fontified t)) . -746) (undo-tree-id212 . -1) (#(" " 0 1 (fontified t)) . -747) (undo-tree-id213 . -1) (#(" " 0 1 (fontified t)) . -748) (undo-tree-id214 . -1) 749 (741 . 749) (apply yas--snippet-revive 727 732 #s(yas--snippet nil nil #s(yas--exit 732 nil) 32 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 732 nil) 32 nil nil nil nil)) (727 . 732) (#("GREEN$0" 0 7 (fontified nil)) . 727) (727 . 734) (#("GREEN" 0 5 (fontified nil)) . -727) (727 . 732) (726 . 727) (#("G" 0 1 (fontified t face font-lock-type-face)) . -726) (undo-tree-id215 . -1) (#("R" 0 1 (fontified t face font-lock-type-face)) . -727) (undo-tree-id216 . -1) (#("E" 0 1 (fontified t face font-lock-type-face)) . -728) (undo-tree-id217 . -1) (#("E" 0 1 (fontified t face font-lock-type-face)) . -729) (undo-tree-id218 . -1) 730 (722 . 730) (718 . 722) (719 . 726) (#("	   " 0 4 (fontified nil face (rainbow-delimiters-depth-3-face))) . 718) (718 . 722) (717 . 719) (715 . 718) (702 . 715) (697 . 702) (#("gre" 0 3 (fontified nil)) . 697) (697 . 700) (#("green" 0 5 (fontified nil)) . -697) (697 . 702) (#("gre" 0 3 (fontified t)) . -697) (undo-tree-id219 . -3) 700 (689 . 700) (#(">" 0 1 (fontified t syntax-table (1))) . -689) (undo-tree-id220 . -1) (#("=" 0 1 (fontified t)) . -690) (undo-tree-id221 . -1) (#(" " 0 1 (fontified t)) . -691) (undo-tree-id222 . -1) (#("s" 0 1 (fontified t)) . -692) (undo-tree-id223 . -1) (#("e" 0 1 (fontified t)) . -693) (undo-tree-id224 . -1) (#("l" 0 1 (fontified t)) . -694) (undo-tree-id225 . -1) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -695) (undo-tree-id226 . -1) (#("." 0 1 (fontified t)) . -696) (undo-tree-id227 . -1) 697 (687 . 697) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -687) (undo-tree-id228 . -1) 688 (687 . 688) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -687) (undo-tree-id229 . -1) 688 (684 . 688) (677 . 684) (658 . 677) (650 . 658) (apply yas--snippet-revive 638 641 #s(yas--snippet nil nil #s(yas--exit 641 nil) 31 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 641 nil) 31 nil nil nil nil)) (638 . 641) (#("RED$0" 0 5 (fontified nil)) . 638) (638 . 643) (#("R" 0 1 (fontified nil)) . 638) (638 . 639) (#("RED" 0 3 (fontified nil)) . -638) (638 . 641) (#("R" 0 1 (fontified t face font-lock-type-face)) . -638) (undo-tree-id230 . -1) 639 (637 . 639) (633 . 637) (629 . 633) (630 . 637) (#("	   " 0 4 (fontified nil face (rainbow-delimiters-depth-3-face))) . 629) (629 . 633) (628 . 630) (609 . 629) (601 . 609) (596 . 601) (#("gre" 0 3 (fontified nil)) . 596) (596 . 599) (#("green" 0 5 (fontified nil)) . -596) (596 . 601) (#("gre" 0 3 (fontified t)) . -596) (undo-tree-id231 . -3) 599 (588 . 599) (#("+" 0 1 (fontified t)) . -588) (undo-tree-id232 . -1) 589 (576 . 589) (apply yas--snippet-revive 546 581 #s(yas--snippet nil nil #s(yas--exit 576 nil) 30 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 576 nil) 30 nil nil nil nil)) (546 . 581) (#("fn max(&self) -> RGB {
       $0
   }" 0 15 (fontified nil) 15 16 (fontified nil syntax-table (1)) 16 37 (fontified nil)) . 546) (579 . 582) (573 . 576) (546 . 577) (#("fn" 0 2 (fontified nil)) . 546) (546 . 548) (#("fn max(..)" 0 10 (fontified nil)) . -546) (546 . 556) (#("fn" 0 2 (fontified t face font-lock-keyword-face)) . -546) (undo-tree-id233 . -2) 548 (546 . 548) (t 25815 55380 502625 156000)) nil (25815 55696 207089 999000) 0 nil])
([nil nil ((#(".to_rgba8();" 0 3 (fontified t) 3 9 (fontified t) 9 10 (fontified t face (rainbow-delimiters-depth-2-face)) 10 11 (fontified t face (rainbow-delimiters-depth-2-face)) 11 12 (fontified t)) . 863) (undo-tree-id1180 . -6) (undo-tree-id1181 . -1)) ((863 . 875)) (25815 55700 606266 543000) 0 nil])
([nil nil ((875 . 878) (#("nwidth" 0 6 (fontified nil)) . 875) (undo-tree-id1182 . 6) (undo-tree-id1183 . -1) (undo-tree-id1184 . 6) (874 . 875) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 874 874 nil nil nil t #s(yas--field 2 880 887 nil nil nil nil #s(yas--exit 888 nil))) #s(yas--field 2 880 887 nil nil nil nil #s(yas--exit 888 nil))) #s(yas--exit 888 nil) 33 nil #s(yas--field 1 874 874 nil nil nil t #s(yas--field 2 880 887 nil nil nil nil #s(yas--exit 888 nil))) nil nil)) (864 . 890) (#("thumbnail(${1:nwidth}, ${2:nheight})$0" 0 38 (fontified nil)) . 864) (864 . 902) (#("th" 0 2 (fontified nil)) . 864) (864 . 866) (#("thumbnail(…)" 0 12 (fontified nil)) . 864) (864 . 876) (#("th" 0 2 (fontified nil)) . 864) (864 . 866) (#("p" 0 1 (fontified nil)) . 864) (863 . 865)) ((#(".p" 0 1 (fontified nil) 1 2 (fontified nil)) . 863) (undo-tree-id939 . -1) (undo-tree-id940 . -2) (undo-tree-id941 . -1) (undo-tree-id943 . -1) (undo-tree-id945 . -1) (undo-tree-id947 . -1) (undo-tree-id949 . -1) (undo-tree-id951 . -1) (undo-tree-id953 . -1) (undo-tree-id955 . -1) (undo-tree-id957 . -1) (undo-tree-id959 . -1) (undo-tree-id961 . -1) (undo-tree-id963 . -1) (undo-tree-id965 . -1) (undo-tree-id967 . -1) (undo-tree-id969 . -1) (undo-tree-id971 . -1) (undo-tree-id973 . -1) (undo-tree-id975 . -1) (undo-tree-id977 . -1) (undo-tree-id979 . -1) (undo-tree-id981 . -1) (undo-tree-id983 . -1) (undo-tree-id985 . -1) (undo-tree-id987 . -1) (undo-tree-id989 . -1) (undo-tree-id991 . -1) (undo-tree-id993 . -1) (undo-tree-id995 . -1) (undo-tree-id997 . -1) (undo-tree-id999 . -1) (undo-tree-id1001 . -1) (undo-tree-id1003 . -1) (undo-tree-id1005 . -1) (undo-tree-id1007 . -1) (undo-tree-id1009 . -1) (undo-tree-id1011 . -1) (undo-tree-id1013 . -1) (undo-tree-id1015 . -1) (undo-tree-id1017 . -1) (undo-tree-id1019 . -1) (undo-tree-id1021 . -1) (undo-tree-id1023 . -1) (undo-tree-id1025 . -1) (undo-tree-id1027 . -1) (undo-tree-id1029 . -1) (undo-tree-id1031 . -1) (undo-tree-id1033 . -1) (undo-tree-id1035 . -1) (undo-tree-id1037 . -1) (undo-tree-id1039 . -1) (undo-tree-id1041 . -1) (undo-tree-id1043 . -1) (undo-tree-id1045 . -1) (undo-tree-id1047 . -1) (undo-tree-id1049 . -1) (undo-tree-id1051 . -1) (undo-tree-id1053 . -1) (undo-tree-id1055 . -1) (undo-tree-id1057 . -1) (864 . 865) (#("th" 0 2 (fontified nil)) . 864) (undo-tree-id1058 . -2) (864 . 866) (#("thumbnail(…)" 0 12 (fontified nil)) . 864) (864 . 876) (#("th" 0 2 (fontified nil)) . 864) (864 . 866) (#("thumbnail(${1:nwidth}, ${2:nheight})$0" 0 38 (fontified nil)) . 864) (864 . 902) (#("thumbnail(nwidth, nheight)" 0 9 (fontified nil) 9 10 (fontified nil face (rainbow-delimiters-depth-2-face)) 10 16 (fontified nil) 16 18 (fontified nil) 18 25 (fontified nil) 25 26 (fontified nil face (rainbow-delimiters-depth-2-face))) . 864) (undo-tree-id1059 . -26) (undo-tree-id1060 . -10) (undo-tree-id1061 . -26) (undo-tree-id1063 . -10) (undo-tree-id1065 . -10) (undo-tree-id1067 . -10) (undo-tree-id1069 . -10) (undo-tree-id1071 . -10) (undo-tree-id1073 . -10) (undo-tree-id1075 . -10) (undo-tree-id1077 . -10) (undo-tree-id1079 . -10) (undo-tree-id1081 . -10) (undo-tree-id1083 . -10) (undo-tree-id1085 . -10) (undo-tree-id1087 . -10) (undo-tree-id1089 . -10) (undo-tree-id1091 . -10) (undo-tree-id1093 . -10) (undo-tree-id1095 . -10) (undo-tree-id1097 . -10) (undo-tree-id1099 . -10) (undo-tree-id1101 . -10) (undo-tree-id1103 . -10) (undo-tree-id1105 . -10) (undo-tree-id1107 . -10) (undo-tree-id1109 . -10) (undo-tree-id1111 . -10) (undo-tree-id1113 . -10) (undo-tree-id1115 . -10) (undo-tree-id1117 . -10) (undo-tree-id1119 . -10) (undo-tree-id1121 . -10) (undo-tree-id1123 . -10) (undo-tree-id1125 . -10) (undo-tree-id1127 . -10) (undo-tree-id1129 . -10) (undo-tree-id1131 . -10) (undo-tree-id1133 . -10) (undo-tree-id1135 . -10) (undo-tree-id1137 . -10) (undo-tree-id1139 . -10) (undo-tree-id1141 . -10) (undo-tree-id1143 . -10) (undo-tree-id1145 . -10) (undo-tree-id1147 . -10) (undo-tree-id1149 . -10) (undo-tree-id1151 . -10) (undo-tree-id1153 . -10) (undo-tree-id1155 . -10) (undo-tree-id1157 . -10) (undo-tree-id1159 . -10) (undo-tree-id1161 . -10) (undo-tree-id1163 . -10) (undo-tree-id1165 . -10) (undo-tree-id1167 . -10) (undo-tree-id1169 . -10) (undo-tree-id1171 . -10) (undo-tree-id1173 . -10) (undo-tree-id1175 . -10) (undo-tree-id1177 . -10) (apply yas--snippet-revive 864 890 #s(yas--snippet nil (#s(yas--field 1 874 874 nil nil nil t #s(yas--field 2 880 887 nil nil nil nil #s(yas--exit 888 nil))) #s(yas--field 2 880 887 nil nil nil nil #s(yas--exit 888 nil))) #s(yas--exit 888 nil) 33 nil #s(yas--field 1 874 874 nil nil nil t #s(yas--field 2 880 887 nil nil nil nil #s(yas--exit 888 nil))) nil nil)) (#("1" 0 1 (fontified nil)) . 874) (875 . 881) (#("000" 0 3 (fontified t)) . 875)) (25815 55700 828747 604000) 0 nil])
([nil nil ((apply yas--snippet-revive 864 888 #s(yas--snippet nil (#s(yas--field 1 874 874 nil nil nil t #s(yas--field 2 880 887 nil nil nil nil #s(yas--exit 888 nil))) #s(yas--field 2 880 887 nil nil nil nil #s(yas--exit 888 nil))) #s(yas--exit 888 nil) 33 nil #s(yas--field 1 874 874 nil nil nil t #s(yas--field 2 880 887 nil nil nil nil #s(yas--exit 888 nil))) nil nil))) nil (25815 55701 68514 464000) 0 nil] [nil nil ((apply yas--snippet-revive 864 888 #s(yas--snippet nil (#s(yas--field 1 874 874 nil nil nil t #s(yas--field 2 880 887 nil nil nil nil #s(yas--exit 888 nil))) #s(yas--field 2 880 887 nil nil nil nil #s(yas--exit 888 nil))) #s(yas--exit 888 nil) 33 nil #s(yas--field 1 874 874 nil nil nil t #s(yas--field 2 880 887 nil nil nil nil #s(yas--exit 888 nil))) nil nil))) ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 874 874 nil nil nil t #s(yas--field 2 880 887 nil nil nil nil #s(yas--exit 888 nil))) #s(yas--field 2 880 887 nil nil nil nil #s(yas--exit 888 nil))) #s(yas--exit 888 nil) 33 nil #s(yas--field 1 874 874 nil nil nil t #s(yas--field 2 880 887 nil nil nil nil #s(yas--exit 888 nil))) nil nil))) (25815 55695 318260 710000) 0 nil])
([nil nil ((898 . 899) (892 . 898) (888 . 892)) nil (25815 55710 165273 370000) 0 nil])
([nil nil ((880 . 884) (#("nheight" 0 7 (fontified t)) . 880) (undo-tree-id239 . -6) (undo-tree-id241 . -7)) ((880 . 887) (#("1000" 0 4 (fontified t)) . 880) (undo-tree-id726 . -4) (undo-tree-id727 . -4) (undo-tree-id728 . -4) (undo-tree-id729 . -4) (undo-tree-id730 . -4) (undo-tree-id731 . -4) (undo-tree-id732 . -4) (undo-tree-id733 . -4) (undo-tree-id734 . -4) (undo-tree-id735 . -4) (undo-tree-id736 . -4) (undo-tree-id737 . -4) (undo-tree-id738 . -4) (undo-tree-id739 . -4) (undo-tree-id740 . -4) (undo-tree-id741 . -4) (undo-tree-id742 . -4) (undo-tree-id743 . -4) (undo-tree-id744 . -4) (undo-tree-id745 . -4) (undo-tree-id746 . -4) (undo-tree-id747 . -4) (undo-tree-id748 . -4) (undo-tree-id749 . -4) (undo-tree-id750 . -4) (undo-tree-id751 . -4) (undo-tree-id752 . -4) (undo-tree-id753 . -4) (undo-tree-id754 . -4) (undo-tree-id755 . -4) (undo-tree-id756 . -4) (undo-tree-id757 . -4) (undo-tree-id758 . -4) (undo-tree-id759 . -4) (undo-tree-id760 . -4) (undo-tree-id761 . -4) (undo-tree-id762 . -4) (undo-tree-id763 . -4) (undo-tree-id764 . -4) (undo-tree-id765 . -4) (undo-tree-id766 . -4) (undo-tree-id767 . -4) (undo-tree-id768 . -4) (undo-tree-id769 . -4) (undo-tree-id770 . -4) (undo-tree-id771 . -4) (undo-tree-id772 . -4) (undo-tree-id773 . -4) (undo-tree-id774 . -4) (undo-tree-id775 . -4) (undo-tree-id776 . -4) (undo-tree-id777 . -4) (undo-tree-id778 . -4) (undo-tree-id779 . -4) (undo-tree-id780 . -4) (undo-tree-id781 . -4) (undo-tree-id782 . -4) (undo-tree-id783 . -4) (undo-tree-id784 . -4) (undo-tree-id785 . -4) (undo-tree-id786 . -4) (undo-tree-id787 . -4) (undo-tree-id788 . -4) (undo-tree-id789 . -4) (undo-tree-id790 . -4) (undo-tree-id791 . -4) (undo-tree-id792 . -4) (undo-tree-id793 . -4) (undo-tree-id794 . -4) (undo-tree-id795 . -4) (undo-tree-id796 . -4) (undo-tree-id797 . -4) (undo-tree-id798 . -4) (undo-tree-id799 . -4) (undo-tree-id800 . -4) (undo-tree-id801 . -4) (undo-tree-id802 . -4) (undo-tree-id803 . -4) (undo-tree-id804 . -4) (undo-tree-id805 . -4) (undo-tree-id806 . -4) (undo-tree-id807 . -4) (undo-tree-id808 . -4) (undo-tree-id809 . -4) (undo-tree-id810 . -4) (undo-tree-id811 . -4) (undo-tree-id812 . -4) (undo-tree-id813 . -4) (undo-tree-id814 . -4) (undo-tree-id815 . -4) (undo-tree-id816 . -4) (undo-tree-id817 . -4) (undo-tree-id818 . -4) (undo-tree-id819 . -4) (undo-tree-id820 . -4) (undo-tree-id821 . -4) (undo-tree-id822 . -4) (undo-tree-id823 . -4) (undo-tree-id824 . -4) (undo-tree-id825 . -4) (undo-tree-id826 . -4) (undo-tree-id827 . -4) (undo-tree-id828 . -4) (undo-tree-id829 . -4) (undo-tree-id830 . -4) (undo-tree-id831 . -4) (undo-tree-id832 . -4) (undo-tree-id833 . -4) (undo-tree-id834 . -4) (undo-tree-id835 . -4) (undo-tree-id836 . -4) (undo-tree-id837 . -4) (undo-tree-id838 . -4) (undo-tree-id839 . -4) (undo-tree-id840 . -4) (undo-tree-id841 . -4) (undo-tree-id842 . -4) (undo-tree-id843 . -4) (undo-tree-id844 . -4) (undo-tree-id845 . -4) (undo-tree-id846 . -4) (undo-tree-id847 . -4) (undo-tree-id848 . -4) (undo-tree-id849 . -4) (undo-tree-id850 . -4) (undo-tree-id851 . -4) (undo-tree-id852 . -4) (undo-tree-id853 . -4) (undo-tree-id854 . -4) (undo-tree-id855 . -4) (undo-tree-id856 . -4) (undo-tree-id857 . -4) (undo-tree-id858 . -4) (undo-tree-id859 . -4) (undo-tree-id860 . -4) (undo-tree-id861 . -4) (undo-tree-id862 . -4) (undo-tree-id863 . -4) (undo-tree-id864 . -4) (undo-tree-id865 . -4) (undo-tree-id866 . -4) (undo-tree-id867 . -4) (undo-tree-id868 . -4) (undo-tree-id869 . -4) (undo-tree-id870 . -4) (undo-tree-id871 . -4) (undo-tree-id872 . -4) (undo-tree-id873 . -4) (undo-tree-id874 . -4) (undo-tree-id875 . -4) (undo-tree-id876 . -4) (undo-tree-id877 . -4) (undo-tree-id878 . -4) (undo-tree-id879 . -4) (undo-tree-id880 . -4) (undo-tree-id881 . -4) (undo-tree-id882 . -4) (undo-tree-id883 . -4) (undo-tree-id884 . -4) (undo-tree-id885 . -4) (undo-tree-id886 . -4) (undo-tree-id887 . -4) (undo-tree-id888 . -4) (undo-tree-id889 . -4) (undo-tree-id890 . -4) (undo-tree-id891 . -4) (undo-tree-id892 . -4) (undo-tree-id893 . -4) (undo-tree-id894 . -4) (undo-tree-id895 . -4) (undo-tree-id896 . -4) (undo-tree-id897 . -4) (undo-tree-id898 . -4) (undo-tree-id899 . -4) (undo-tree-id900 . -4) (undo-tree-id901 . -4) (undo-tree-id902 . -4) (undo-tree-id903 . -4) (undo-tree-id904 . -4) (undo-tree-id905 . -4) (undo-tree-id906 . -4) (undo-tree-id907 . -4) (undo-tree-id908 . -4) (undo-tree-id909 . -4) (undo-tree-id910 . -4) (undo-tree-id911 . -4) (undo-tree-id912 . -4) (undo-tree-id913 . -4) (undo-tree-id914 . -4) (undo-tree-id915 . -4) (undo-tree-id916 . -4) (undo-tree-id917 . -4) (undo-tree-id918 . -4) (undo-tree-id919 . -4) (undo-tree-id920 . -4) (undo-tree-id921 . -4) (undo-tree-id922 . -4) (undo-tree-id923 . -4) (undo-tree-id924 . -4) (undo-tree-id925 . -4) (undo-tree-id926 . -4) (undo-tree-id927 . -4) (undo-tree-id928 . -4) (undo-tree-id929 . -4) (undo-tree-id930 . -4) (undo-tree-id931 . -4) (undo-tree-id932 . -4) (undo-tree-id933 . -4) (undo-tree-id934 . -4) (undo-tree-id935 . -4) (undo-tree-id936 . -4) (undo-tree-id937 . -4) (undo-tree-id938 . -4)) (25815 55694 938598 945000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face font-lock-type-face)) . 210) (t 25815 55710 169927 248000)) nil (25815 55721 826032 332000) 0 nil])
([nil nil ((895 . 896) (892 . 895) (#("a" 0 1 (fontified t)) . -892) (undo-tree-id234 . -1) 893 (892 . 893) (885 . 892) (#("." 0 1 (fontified t)) . -885) (undo-tree-id235 . -1) (#("r" 0 1 (fontified t)) . -886) (undo-tree-id236 . -1) (#("h" 0 1 (fontified t)) . -887) (undo-tree-id237 . -1) (#("b" 0 1 (fontified t)) . -888) (undo-tree-id238 . -1) 889 (885 . 889)) ((#(".rhb" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil)) . 885) (undo-tree-id291 . -4) (885 . 889) (#(".to_rgb" 0 7 (fontified nil)) . 885) (undo-tree-id292 . -7) (undo-tree-id293 . -7) (undo-tree-id294 . -7) (undo-tree-id295 . -7) (undo-tree-id296 . -7) (undo-tree-id297 . -7) (undo-tree-id298 . -7) (undo-tree-id299 . -7) (undo-tree-id300 . -7) (undo-tree-id301 . -7) (undo-tree-id302 . -7) (undo-tree-id303 . -7) (undo-tree-id304 . -7) (undo-tree-id305 . -7) (undo-tree-id306 . -7) (undo-tree-id307 . -7) (undo-tree-id308 . -7) (undo-tree-id309 . -7) (undo-tree-id310 . -7) (undo-tree-id311 . -7) (undo-tree-id312 . -7) (undo-tree-id313 . -7) (undo-tree-id314 . -7) (undo-tree-id315 . -7) (undo-tree-id316 . -7) (undo-tree-id317 . -7) (undo-tree-id318 . -7) (undo-tree-id319 . -7) (undo-tree-id320 . -7) (undo-tree-id321 . -7) (undo-tree-id322 . -7) (undo-tree-id323 . -7) (undo-tree-id324 . -7) (undo-tree-id325 . -7) (undo-tree-id326 . -7) (undo-tree-id327 . -7) (undo-tree-id328 . -7) (undo-tree-id329 . -7) (undo-tree-id330 . -7) (undo-tree-id331 . -7) (undo-tree-id332 . -7) (undo-tree-id333 . -7) (undo-tree-id334 . -7) (undo-tree-id335 . -7) (undo-tree-id336 . -7) (undo-tree-id337 . -7) (undo-tree-id338 . -7) (undo-tree-id339 . -7) (undo-tree-id340 . -7) (undo-tree-id341 . -7) (undo-tree-id342 . -7) (undo-tree-id343 . -7) (undo-tree-id344 . -7) (undo-tree-id345 . -7) (undo-tree-id346 . -7) (undo-tree-id347 . -7) (undo-tree-id348 . -7) (undo-tree-id349 . -7) (undo-tree-id350 . -7) (undo-tree-id351 . -7) (undo-tree-id352 . -7) (undo-tree-id353 . -7) (undo-tree-id354 . -7) (undo-tree-id355 . -7) (undo-tree-id356 . -7) (undo-tree-id357 . -7) (undo-tree-id358 . -7) (undo-tree-id359 . -7) (undo-tree-id360 . -7) (undo-tree-id361 . -7) (undo-tree-id362 . -7) (undo-tree-id363 . -7) (undo-tree-id364 . -7) (undo-tree-id365 . -7) (undo-tree-id366 . -7) (undo-tree-id367 . -7) (undo-tree-id368 . -7) (undo-tree-id369 . -7) (undo-tree-id370 . -7) (undo-tree-id371 . -7) (undo-tree-id372 . -7) (undo-tree-id373 . -7) (undo-tree-id374 . -7) (undo-tree-id375 . -7) (undo-tree-id376 . -7) (undo-tree-id377 . -7) (undo-tree-id378 . -7) (undo-tree-id379 . -7) (undo-tree-id380 . -7) (undo-tree-id381 . -7) (undo-tree-id382 . -7) (undo-tree-id383 . -7) (undo-tree-id384 . -7) (undo-tree-id385 . -7) (undo-tree-id386 . -7) (undo-tree-id387 . -7) (undo-tree-id388 . -7) (undo-tree-id389 . -7) (undo-tree-id390 . -7) (undo-tree-id391 . -7) (undo-tree-id392 . -7) (undo-tree-id393 . -7) (undo-tree-id394 . -7) (undo-tree-id395 . -7) (undo-tree-id396 . -7) (undo-tree-id397 . -7) (undo-tree-id398 . -7) (undo-tree-id399 . -7) (undo-tree-id400 . -7) (undo-tree-id401 . -7) (undo-tree-id402 . -7) (undo-tree-id403 . -7) (undo-tree-id404 . -7) (undo-tree-id405 . -7) (undo-tree-id406 . -7) (undo-tree-id407 . -7) (undo-tree-id408 . -7) (undo-tree-id409 . -7) (undo-tree-id410 . -7) (undo-tree-id411 . -7) (undo-tree-id412 . -7) (undo-tree-id413 . -7) (undo-tree-id414 . -7) (undo-tree-id415 . -7) (undo-tree-id416 . -7) (undo-tree-id417 . -7) (undo-tree-id418 . -7) (undo-tree-id419 . -7) (undo-tree-id420 . -7) (undo-tree-id421 . -7) (undo-tree-id422 . -7) (undo-tree-id423 . -7) (undo-tree-id424 . -7) (undo-tree-id425 . -7) (undo-tree-id426 . -7) (undo-tree-id427 . -7) (undo-tree-id428 . -7) (undo-tree-id429 . -7) (undo-tree-id430 . -7) (undo-tree-id431 . -7) (undo-tree-id432 . -7) (undo-tree-id433 . -7) (undo-tree-id434 . -7) (undo-tree-id435 . -7) (undo-tree-id436 . -7) (undo-tree-id437 . -7) (undo-tree-id438 . -7) (undo-tree-id439 . -7) (undo-tree-id440 . -7) (undo-tree-id441 . -7) (undo-tree-id442 . -7) (undo-tree-id443 . -7) (undo-tree-id444 . -7) (undo-tree-id445 . -7) (undo-tree-id446 . -7) (undo-tree-id447 . -7) (undo-tree-id448 . -7) (undo-tree-id449 . -7) (undo-tree-id450 . -7) (undo-tree-id451 . -7) (undo-tree-id452 . -7) (undo-tree-id453 . -7) (undo-tree-id454 . -7) (undo-tree-id455 . -7) (undo-tree-id456 . -7) (undo-tree-id457 . -7) (undo-tree-id458 . -7) (undo-tree-id459 . -7) (undo-tree-id460 . -7) (undo-tree-id461 . -7) (undo-tree-id462 . -7) (undo-tree-id463 . -7) (undo-tree-id464 . -7) (undo-tree-id465 . -7) (undo-tree-id466 . -7) (undo-tree-id467 . -7) (undo-tree-id468 . -7) (undo-tree-id469 . -7) (undo-tree-id470 . -7) (undo-tree-id471 . -7) (undo-tree-id472 . -7) (undo-tree-id473 . -7) (undo-tree-id474 . -7) (undo-tree-id475 . -7) (undo-tree-id476 . -7) (undo-tree-id477 . -7) (undo-tree-id478 . -7) (undo-tree-id479 . -7) (undo-tree-id480 . -7) (undo-tree-id481 . -7) (undo-tree-id482 . -7) (undo-tree-id483 . -7) (undo-tree-id484 . -7) (undo-tree-id485 . -7) (undo-tree-id486 . -7) (undo-tree-id487 . -7) (undo-tree-id488 . -7) (undo-tree-id489 . -7) (undo-tree-id490 . -7) (undo-tree-id491 . -7) (undo-tree-id492 . -7) (undo-tree-id493 . -7) (undo-tree-id494 . -7) (undo-tree-id495 . -7) (undo-tree-id496 . -7) (undo-tree-id497 . -7) (undo-tree-id498 . -7) (undo-tree-id499 . -7) (undo-tree-id500 . -7) (undo-tree-id501 . -7) (undo-tree-id502 . -7) (undo-tree-id503 . -7) (undo-tree-id504 . -7) (undo-tree-id505 . -7) (undo-tree-id506 . -7) (undo-tree-id507 . -7) (#("a" 0 1 (fontified nil)) . 892) (undo-tree-id508 . -1) (892 . 893) (#("8()" 0 1 (fontified nil) 1 2 (fontified nil face (rainbow-delimiters-depth-2-face)) 2 3 (fontified nil face (rainbow-delimiters-depth-2-face))) . 892) (undo-tree-id509 . -3) (undo-tree-id510 . -3) (undo-tree-id511 . -3) (undo-tree-id512 . -3) (undo-tree-id513 . -3) (undo-tree-id514 . -3) (undo-tree-id515 . -3) (undo-tree-id516 . -3) (undo-tree-id517 . -3) (undo-tree-id518 . -3) (undo-tree-id519 . -3) (undo-tree-id520 . -3) (undo-tree-id521 . -3) (undo-tree-id522 . -3) (undo-tree-id523 . -3) (undo-tree-id524 . -3) (undo-tree-id525 . -3) (undo-tree-id526 . -3) (undo-tree-id527 . -3) (undo-tree-id528 . -3) (undo-tree-id529 . -3) (undo-tree-id530 . -3) (undo-tree-id531 . -3) (undo-tree-id532 . -3) (undo-tree-id533 . -3) (undo-tree-id534 . -3) (undo-tree-id535 . -3) (undo-tree-id536 . -3) (undo-tree-id537 . -3) (undo-tree-id538 . -3) (undo-tree-id539 . -3) (undo-tree-id540 . -3) (undo-tree-id541 . -3) (undo-tree-id542 . -3) (undo-tree-id543 . -3) (undo-tree-id544 . -3) (undo-tree-id545 . -3) (undo-tree-id546 . -3) (undo-tree-id547 . -3) (undo-tree-id548 . -3) (undo-tree-id549 . -3) (undo-tree-id550 . -3) (undo-tree-id551 . -3) (undo-tree-id552 . -3) (undo-tree-id553 . -3) (undo-tree-id554 . -3) (undo-tree-id555 . -3) (undo-tree-id556 . -3) (undo-tree-id557 . -3) (undo-tree-id558 . -3) (undo-tree-id559 . -3) (undo-tree-id560 . -3) (undo-tree-id561 . -3) (undo-tree-id562 . -3) (undo-tree-id563 . -3) (undo-tree-id564 . -3) (undo-tree-id565 . -3) (undo-tree-id566 . -3) (undo-tree-id567 . -3) (undo-tree-id568 . -3) (undo-tree-id569 . -3) (undo-tree-id570 . -3) (undo-tree-id571 . -3) (undo-tree-id572 . -3) (undo-tree-id573 . -3) (undo-tree-id574 . -3) (undo-tree-id575 . -3) (undo-tree-id576 . -3) (undo-tree-id577 . -3) (undo-tree-id578 . -3) (undo-tree-id579 . -3) (undo-tree-id580 . -3) (undo-tree-id581 . -3) (undo-tree-id582 . -3) (undo-tree-id583 . -3) (undo-tree-id584 . -3) (undo-tree-id585 . -3) (undo-tree-id586 . -3) (undo-tree-id587 . -3) (undo-tree-id588 . -3) (undo-tree-id589 . -3) (undo-tree-id590 . -3) (undo-tree-id591 . -3) (undo-tree-id592 . -3) (undo-tree-id593 . -3) (undo-tree-id594 . -3) (undo-tree-id595 . -3) (undo-tree-id596 . -3) (undo-tree-id597 . -3) (undo-tree-id598 . -3) (undo-tree-id599 . -3) (undo-tree-id600 . -3) (undo-tree-id601 . -3) (undo-tree-id602 . -3) (undo-tree-id603 . -3) (undo-tree-id604 . -3) (undo-tree-id605 . -3) (undo-tree-id606 . -3) (undo-tree-id607 . -3) (undo-tree-id608 . -3) (undo-tree-id609 . -3) (undo-tree-id610 . -3) (undo-tree-id611 . -3) (undo-tree-id612 . -3) (undo-tree-id613 . -3) (undo-tree-id614 . -3) (undo-tree-id615 . -3) (undo-tree-id616 . -3) (undo-tree-id617 . -3) (undo-tree-id618 . -3) (undo-tree-id619 . -3) (undo-tree-id620 . -3) (undo-tree-id621 . -3) (undo-tree-id622 . -3) (undo-tree-id623 . -3) (undo-tree-id624 . -3) (undo-tree-id625 . -3) (undo-tree-id626 . -3) (undo-tree-id627 . -3) (undo-tree-id628 . -3) (undo-tree-id629 . -3) (undo-tree-id630 . -3) (undo-tree-id631 . -3) (undo-tree-id632 . -3) (undo-tree-id633 . -3) (undo-tree-id634 . -3) (undo-tree-id635 . -3) (undo-tree-id636 . -3) (undo-tree-id637 . -3) (undo-tree-id638 . -3) (undo-tree-id639 . -3) (undo-tree-id640 . -3) (undo-tree-id641 . -3) (undo-tree-id642 . -3) (undo-tree-id643 . -3) (undo-tree-id644 . -3) (undo-tree-id645 . -3) (undo-tree-id646 . -3) (undo-tree-id647 . -3) (undo-tree-id648 . -3) (undo-tree-id649 . -3) (undo-tree-id650 . -3) (undo-tree-id651 . -3) (undo-tree-id652 . -3) (undo-tree-id653 . -3) (undo-tree-id654 . -3) (undo-tree-id655 . -3) (undo-tree-id656 . -3) (undo-tree-id657 . -3) (undo-tree-id658 . -3) (undo-tree-id659 . -3) (undo-tree-id660 . -3) (undo-tree-id661 . -3) (undo-tree-id662 . -3) (undo-tree-id663 . -3) (undo-tree-id664 . -3) (undo-tree-id665 . -3) (undo-tree-id666 . -3) (undo-tree-id667 . -3) (undo-tree-id668 . -3) (undo-tree-id669 . -3) (undo-tree-id670 . -3) (undo-tree-id671 . -3) (undo-tree-id672 . -3) (undo-tree-id673 . -3) (undo-tree-id674 . -3) (undo-tree-id675 . -3) (undo-tree-id676 . -3) (undo-tree-id677 . -3) (undo-tree-id678 . -3) (undo-tree-id679 . -3) (undo-tree-id680 . -3) (undo-tree-id681 . -3) (undo-tree-id682 . -3) (undo-tree-id683 . -3) (undo-tree-id684 . -3) (undo-tree-id685 . -3) (undo-tree-id686 . -3) (undo-tree-id687 . -3) (undo-tree-id688 . -3) (undo-tree-id689 . -3) (undo-tree-id690 . -3) (undo-tree-id691 . -3) (undo-tree-id692 . -3) (undo-tree-id693 . -3) (undo-tree-id694 . -3) (undo-tree-id695 . -3) (undo-tree-id696 . -3) (undo-tree-id697 . -3) (undo-tree-id698 . -3) (undo-tree-id699 . -3) (undo-tree-id700 . -3) (undo-tree-id701 . -3) (undo-tree-id702 . -3) (undo-tree-id703 . -3) (undo-tree-id704 . -3) (undo-tree-id705 . -3) (undo-tree-id706 . -3) (undo-tree-id707 . -3) (undo-tree-id708 . -3) (undo-tree-id709 . -3) (undo-tree-id710 . -3) (undo-tree-id711 . -3) (undo-tree-id712 . -3) (undo-tree-id713 . -3) (undo-tree-id714 . -3) (undo-tree-id715 . -3) (undo-tree-id716 . -3) (undo-tree-id717 . -3) (undo-tree-id718 . -3) (undo-tree-id719 . -3) (undo-tree-id720 . -3) (undo-tree-id721 . -3) (undo-tree-id722 . -3) (undo-tree-id723 . -3) (#(";" 0 1 (fontified t)) . 895) (undo-tree-id724 . 1) (undo-tree-id725 . 1) (t 25815 55637 765237 502000)) (25815 55694 614823 454000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face font-lock-type-face)) . 15) (undo-tree-id1185 . -1) (t 25815 55721 834036 885000)) nil (25815 55786 814994 714000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -895) (undo-tree-id253 . -1) (#("c" 0 1 (fontified t)) . -896) (undo-tree-id254 . -1) (#("o" 0 1 (fontified t)) . -897) (undo-tree-id255 . -1) 898 (897 . 898) (#("o" 0 1 (fontified t)) . -897) (undo-tree-id256 . -1) (#("l" 0 1 (fontified t)) . -898) (undo-tree-id257 . -1) 899 (895 . 899) (893 . 895) (892 . 893) (#("a" 0 1 (fontified t)) . -892) (undo-tree-id258 . -1) 893 (892 . 893) (#("8" 0 1 (fontified t)) . -892) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -893) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -894) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . 1) (undo-tree-id271 . -1) (#("." 0 1 (fontified t)) . -895) (undo-tree-id272 . -1) 896 (895 . 896) (t 25815 55637 765237 502000)) ((#("." 0 1 (fontified nil)) . 895) (undo-tree-id273 . -1) (892 . 896) (#("a" 0 1 (fontified nil)) . 892) (undo-tree-id274 . -1) (undo-tree-id275 . 1) (undo-tree-id276 . 1) (892 . 893) (#("8" 0 1 (fontified nil)) . 892) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (#("()" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face)) 1 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 893) (undo-tree-id283 . -2) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . 1) (undo-tree-id287 . -2) (undo-tree-id288 . 2) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (#(".col" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil)) . 895) (897 . 899) (#("o" 0 1 (fontified nil)) . 897) (895 . 898)) (25815 55694 613907 865000) 0 nil])
([nil nil ((878 . 882) (#("nheight" 0 7 (fontified t)) . 878) (undo-tree-id1186 . -6) (undo-tree-id1187 . -7) (undo-tree-id1188 . -7) (undo-tree-id1189 . -7) (t 25815 55787 282645 165000)) nil (25815 55800 712131 516000) 0 nil])
nil
([nil nil ((#("    
" 0 4 (fontified t) 4 5 (fontified t)) . 1237) (undo-tree-id1190 . -4) (undo-tree-id1191 . -4) (undo-tree-id1192 . -3) (undo-tree-id1193 . -3) (undo-tree-id1194 . -3) (undo-tree-id1195 . -3) (undo-tree-id1196 . -3) (undo-tree-id1197 . -3) (undo-tree-id1198 . -3) (undo-tree-id1199 . -3) (undo-tree-id1200 . -3) (undo-tree-id1201 . -3) (undo-tree-id1202 . -3) (undo-tree-id1203 . -3) (undo-tree-id1204 . -3) (undo-tree-id1205 . -3) (undo-tree-id1206 . -3) (undo-tree-id1207 . -3) (undo-tree-id1208 . -3) (undo-tree-id1209 . -3) (undo-tree-id1210 . -3) (undo-tree-id1211 . -3) (undo-tree-id1212 . -3) (undo-tree-id1213 . -3) (undo-tree-id1214 . -3) (undo-tree-id1215 . -3) (undo-tree-id1216 . -3) (undo-tree-id1217 . -3) (undo-tree-id1218 . -3) (undo-tree-id1219 . -3) (undo-tree-id1220 . -3) (undo-tree-id1221 . -3) (undo-tree-id1222 . -3) (undo-tree-id1223 . -3) (undo-tree-id1224 . -3) (undo-tree-id1225 . -3) (undo-tree-id1226 . -3) (undo-tree-id1227 . -3) (undo-tree-id1228 . -3) (undo-tree-id1229 . -3) (undo-tree-id1230 . -3) (undo-tree-id1231 . -3) (undo-tree-id1232 . -3) (undo-tree-id1233 . -3) (undo-tree-id1234 . -3) (undo-tree-id1235 . -3) (undo-tree-id1236 . -3) (undo-tree-id1237 . -3) (undo-tree-id1238 . -3) (undo-tree-id1239 . -3) (undo-tree-id1240 . -3) (undo-tree-id1241 . -3) (undo-tree-id1242 . -3) (undo-tree-id1243 . -3) (undo-tree-id1244 . -3) (undo-tree-id1245 . -3) (undo-tree-id1246 . -3) (undo-tree-id1247 . -3) (undo-tree-id1248 . -3) (undo-tree-id1249 . -3) (undo-tree-id1250 . -3) (undo-tree-id1251 . -3) (undo-tree-id1252 . -3) (undo-tree-id1253 . -3) (undo-tree-id1254 . -3) (undo-tree-id1255 . -3) (undo-tree-id1256 . -3) (undo-tree-id1257 . -3) (undo-tree-id1258 . -3) (undo-tree-id1259 . -3) (undo-tree-id1260 . -3) (undo-tree-id1261 . -3) (undo-tree-id1262 . -3) (undo-tree-id1263 . -3) (undo-tree-id1264 . -3) (undo-tree-id1265 . -3) (undo-tree-id1266 . -3) (undo-tree-id1267 . -3) (undo-tree-id1268 . -3) (undo-tree-id1269 . -3) (undo-tree-id1270 . -3) (undo-tree-id1271 . -3) (undo-tree-id1272 . -3) (undo-tree-id1273 . -3) (undo-tree-id1274 . -3) (undo-tree-id1275 . -3) (undo-tree-id1276 . -3) (undo-tree-id1277 . -3) (undo-tree-id1278 . -3) (undo-tree-id1279 . -3) (undo-tree-id1280 . -3) (undo-tree-id1281 . -3) (undo-tree-id1282 . -3) (undo-tree-id1283 . -3) (undo-tree-id1284 . -3) (undo-tree-id1285 . -3) (undo-tree-id1286 . -3) (undo-tree-id1287 . -3) (undo-tree-id1288 . -3) (undo-tree-id1289 . -3) (undo-tree-id1290 . -3) (undo-tree-id1291 . -3) (undo-tree-id1292 . -3) (undo-tree-id1293 . -3) (undo-tree-id1294 . -3) (undo-tree-id1295 . -3) (undo-tree-id1296 . -3) (undo-tree-id1297 . -3) (undo-tree-id1298 . -3) (undo-tree-id1299 . -3) (undo-tree-id1300 . -3) (undo-tree-id1301 . -3) (undo-tree-id1302 . -3) (undo-tree-id1303 . -3) (undo-tree-id1304 . -3) (undo-tree-id1305 . -3) (undo-tree-id1306 . -3) (undo-tree-id1307 . -3) (undo-tree-id1308 . -3) (undo-tree-id1309 . -3) (undo-tree-id1310 . -3) (undo-tree-id1311 . -3) (undo-tree-id1312 . -3) (undo-tree-id1313 . -3) (undo-tree-id1314 . -3) (undo-tree-id1315 . -3) (undo-tree-id1316 . -3) (undo-tree-id1317 . -3) (undo-tree-id1318 . -3) (undo-tree-id1319 . -3) (undo-tree-id1320 . -3) (undo-tree-id1321 . -3) (undo-tree-id1322 . -3) (undo-tree-id1323 . -3) (undo-tree-id1324 . -3) (undo-tree-id1325 . -3) (undo-tree-id1326 . -3) (undo-tree-id1327 . -3) (undo-tree-id1328 . -3) (undo-tree-id1329 . -3) (undo-tree-id1330 . -3) (undo-tree-id1331 . -3) (undo-tree-id1332 . -3) (undo-tree-id1333 . -3) (undo-tree-id1334 . -3) (undo-tree-id1335 . -3) (undo-tree-id1336 . -3) (undo-tree-id1337 . -3) (undo-tree-id1338 . -3) (undo-tree-id1339 . -3) (undo-tree-id1340 . -3) (undo-tree-id1341 . -3) (undo-tree-id1342 . -3) (undo-tree-id1343 . -3) (undo-tree-id1344 . -3) (undo-tree-id1345 . -3) (undo-tree-id1346 . -3) (undo-tree-id1347 . -3) (undo-tree-id1348 . -3) (undo-tree-id1349 . -3) (undo-tree-id1350 . -3) (undo-tree-id1351 . -3) (undo-tree-id1352 . -3) (undo-tree-id1353 . -3) (undo-tree-id1354 . -3) (undo-tree-id1355 . -3) (undo-tree-id1356 . -3) (undo-tree-id1357 . -3) (undo-tree-id1358 . -3) (undo-tree-id1359 . -3) (undo-tree-id1360 . -3) (undo-tree-id1361 . -3) (undo-tree-id1362 . -3) (undo-tree-id1363 . -3) (undo-tree-id1364 . -3) (undo-tree-id1365 . -3) (undo-tree-id1366 . -3) (undo-tree-id1367 . -3) (undo-tree-id1368 . -3) (undo-tree-id1369 . -3) (undo-tree-id1370 . -3) (undo-tree-id1371 . -3) (undo-tree-id1372 . -3) (undo-tree-id1373 . -3) (undo-tree-id1374 . -3) (undo-tree-id1375 . -3) (undo-tree-id1376 . -3) (undo-tree-id1377 . -3) (undo-tree-id1378 . -3) (undo-tree-id1379 . -3) (undo-tree-id1380 . -3) (undo-tree-id1381 . -3) (undo-tree-id1382 . -3) (undo-tree-id1383 . -3) (undo-tree-id1384 . -3) (undo-tree-id1385 . -3) (undo-tree-id1386 . -3) (undo-tree-id1387 . -3) (undo-tree-id1388 . -3) (undo-tree-id1389 . -3) (undo-tree-id1390 . -3) (undo-tree-id1391 . -3) (undo-tree-id1392 . -3) (undo-tree-id1393 . -3) (undo-tree-id1394 . -3) (undo-tree-id1395 . -3) (undo-tree-id1396 . -3) (undo-tree-id1397 . -3) (undo-tree-id1398 . -3) (undo-tree-id1399 . -3) (undo-tree-id1400 . -3) (undo-tree-id1401 . -3) (undo-tree-id1402 . -3) (undo-tree-id1403 . -3) (undo-tree-id1404 . -3) (undo-tree-id1405 . -3) (undo-tree-id1406 . -3) (undo-tree-id1407 . -3) (undo-tree-id1408 . -3) (undo-tree-id1409 . -3) (undo-tree-id1410 . -3) (undo-tree-id1411 . -3) (undo-tree-id1412 . -3) (undo-tree-id1413 . -3) (undo-tree-id1414 . -3) (undo-tree-id1415 . -3) (undo-tree-id1416 . -3) (undo-tree-id1417 . -3) (undo-tree-id1418 . -3) (undo-tree-id1419 . -3) (undo-tree-id1420 . -3) (undo-tree-id1421 . -3) (undo-tree-id1422 . -3) (undo-tree-id1423 . -3) (undo-tree-id1424 . -3) (undo-tree-id1425 . -3) (undo-tree-id1426 . -3) (undo-tree-id1427 . -3) (undo-tree-id1428 . -3) (undo-tree-id1429 . -3) (undo-tree-id1430 . -3) (undo-tree-id1431 . -3) (undo-tree-id1432 . -3) (undo-tree-id1433 . -3) (undo-tree-id1434 . -3) (undo-tree-id1435 . -3) (undo-tree-id1436 . -3) (undo-tree-id1437 . -3) (undo-tree-id1438 . -3) (undo-tree-id1439 . -3) (undo-tree-id1440 . -3) (undo-tree-id1441 . -3) (undo-tree-id1442 . -3) (undo-tree-id1443 . -3) (undo-tree-id1444 . -3) (undo-tree-id1445 . -3) (undo-tree-id1446 . -3) (undo-tree-id1447 . -3) (undo-tree-id1448 . -3) (undo-tree-id1449 . -3) (undo-tree-id1450 . -3) (undo-tree-id1451 . -3) (undo-tree-id1452 . -3) (undo-tree-id1453 . -3) (undo-tree-id1454 . -3) (undo-tree-id1455 . -3) (undo-tree-id1456 . -3) (undo-tree-id1457 . -3) (undo-tree-id1458 . -3) (undo-tree-id1459 . -3) (undo-tree-id1460 . -3) (undo-tree-id1461 . -3) (undo-tree-id1462 . -3) (undo-tree-id1463 . -3) (undo-tree-id1464 . -3) (undo-tree-id1465 . -3) (undo-tree-id1466 . -3) (undo-tree-id1467 . -3) (undo-tree-id1468 . -3) (undo-tree-id1469 . -3) (undo-tree-id1470 . -3) (undo-tree-id1471 . -3) (undo-tree-id1472 . -3) (undo-tree-id1473 . -3) (undo-tree-id1474 . -3) (undo-tree-id1475 . -3) (undo-tree-id1476 . -3) (undo-tree-id1477 . -3) (undo-tree-id1478 . -3) (undo-tree-id1479 . -3) (undo-tree-id1480 . -3) (undo-tree-id1481 . -3) (undo-tree-id1482 . -3) (undo-tree-id1483 . -3) (undo-tree-id1484 . -3) (undo-tree-id1485 . -3) (undo-tree-id1486 . -3) (undo-tree-id1487 . -3) (undo-tree-id1488 . -3) (undo-tree-id1489 . -3) (undo-tree-id1490 . -3) (undo-tree-id1491 . -3) (undo-tree-id1492 . -3) (undo-tree-id1493 . -3) (undo-tree-id1494 . -3) (undo-tree-id1495 . -5) 1240 (t 25815 55801 298774 1000)) nil (25815 55832 741058 951000) 0 nil])
([nil nil ((nil rear-nonsticky nil 925 . 926) (nil fontified nil 832 . 926) (832 . 926) 831 (t 25815 55833 203065 477000)) nil (25815 55862 377601 709000) 0 nil])
([nil nil ((219 . 1435) (#("fn max(&self) -> RGB {
       let red = self.0[0];
       let green = self.0[1];
       let blue = self.0[2];
       if red >= green && red >= blue {
	   RGB::RED
       }
       else if green >= red && green >= blue {
	   RGB::GREEN
       } else {
	   RGB::BLUE
       }
   } 
}    

impl Component for ComponentCount {
   fn max(&self) -> RGB {
       if self.red >= self.green && self.red >= self.blue {
	   RGB::RED
       }
       else if self.green >= self.red && self.green >= self.blue {
	   RGB::GREEN
       } else {
	   RGB::BLUE
       }
   } 
}

fn main() {
    let image = image::io::Reader::open(\"/home/uwu/Linux-Mass-Storage/Documents/Rust_Stuff/awesome_theme_generator/F3AbO5CbEAEnfe9.jpeg\").unwrap().decode().unwrap().thumbnail(1000, 1000).to_rgb8();
    let pixels = image.pixels().collect::<Vec<_>>();
    let mut max_component_counts = ComponentCount{red:0,green:0,blue:0};
    for pixel in pixels.iter() {
	match pixel.max() {
	    RGB::RED => {max_component_counts.red += 1},
	    RGB::GREEN => {max_component_counts.green +=1},
	    RGB::BLUE => {max_component_counts.blue +=1}
	" 0 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t) 3 6 (fontified t face font-lock-function-name-face) 6 7 (fontified t face (rainbow-delimiters-depth-2-face)) 7 8 (fontified t face rust-ampersand-face) 8 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t face (rainbow-delimiters-depth-2-face)) 13 15 (fontified t) 15 16 (syntax-table (1) fontified t) 16 17 (fontified t) 17 20 (fontified t face font-lock-type-face) 20 21 (fontified t) 21 22 (fontified t face (rainbow-delimiters-depth-2-face)) 22 23 (fontified t) 23 30 (fontified t) 30 33 (fontified t face font-lock-keyword-face) 33 34 (fontified t) 34 37 (fontified t face font-lock-variable-name-face) 37 40 (fontified t) 40 44 (fontified t face font-lock-keyword-face) 44 46 (fontified t) 46 47 (fontified t face (rainbow-delimiters-depth-3-face)) 47 48 (fontified t) 48 49 (fontified t face (rainbow-delimiters-depth-3-face)) 49 50 (fontified t) 50 51 (fontified t) 51 57 (fontified t) 57 58 (rear-nonsticky t fontified t) 58 61 (fontified t face font-lock-keyword-face) 61 62 (fontified t) 62 67 (fontified t face font-lock-variable-name-face) 67 70 (fontified t) 70 74 (fontified t face font-lock-keyword-face) 74 76 (fontified t) 76 77 (fontified t face (rainbow-delimiters-depth-3-face)) 77 78 (fontified t) 78 79 (fontified t face (rainbow-delimiters-depth-3-face)) 79 80 (fontified t) 80 81 (fontified t) 81 87 (fontified t) 87 88 (rear-nonsticky t fontified t) 88 91 (fontified t face font-lock-keyword-face) 91 92 (fontified t) 92 96 (fontified t face font-lock-variable-name-face) 96 99 (fontified t) 99 103 (fontified t face font-lock-keyword-face) 103 105 (fontified t) 105 106 (fontified t face (rainbow-delimiters-depth-3-face)) 106 107 (fontified t) 107 108 (fontified t face (rainbow-delimiters-depth-3-face)) 108 109 (fontified t) 109 110 (fontified t) 110 117 (fontified t) 117 119 (fontified t face font-lock-keyword-face) 119 124 (fontified t) 124 125 (syntax-table (1) fontified t) 125 127 (fontified t) 127 140 (fontified t) 140 141 (syntax-table (1) fontified t) 141 148 (fontified t) 148 149 (fontified t face (rainbow-delimiters-depth-3-face)) 149 150 (fontified t) 150 154 (fontified t) 154 157 (fontified t face font-lock-type-face) 157 159 (fontified t) 159 162 (fontified t face font-lock-type-face) 162 163 (fontified t) 163 170 (fontified t) 170 171 (fontified t face (rainbow-delimiters-depth-3-face)) 171 172 (fontified t) 172 179 (fontified t) 179 183 (fontified t face font-lock-keyword-face) 183 184 (fontified t) 184 186 (fontified t face font-lock-keyword-face) 186 193 (fontified t) 193 194 (syntax-table (1) fontified t) 194 209 (fontified t) 209 210 (syntax-table (1) fontified t) 210 217 (fontified t) 217 218 (fontified t face (rainbow-delimiters-depth-3-face)) 218 219 (fontified t) 219 223 (fontified t) 223 226 (fontified t face font-lock-type-face) 226 228 (fontified t) 228 233 (fontified t face font-lock-type-face) 233 234 (fontified t) 234 241 (fontified t) 241 242 (fontified t face (rainbow-delimiters-depth-3-face)) 242 243 (fontified t) 243 247 (fontified t face font-lock-keyword-face) 247 248 (fontified t) 248 249 (fontified t face (rainbow-delimiters-depth-3-face)) 249 250 (fontified t) 250 254 (fontified t) 254 257 (fontified t face font-lock-type-face) 257 259 (fontified t) 259 263 (fontified t face font-lock-type-face) 263 264 (fontified t) 264 271 (fontified t) 271 272 (fontified t face (rainbow-delimiters-depth-3-face)) 272 273 (fontified t) 273 276 (fontified t) 276 277 (fontified t face (rainbow-delimiters-depth-2-face)) 277 278 (fontified t) 278 279 (fontified t) 279 280 (fontified t face (rainbow-delimiters-depth-1-face)) 280 284 (fontified t) 284 285 (fontified t) 285 286 (fontified t) 286 290 (fontified t face font-lock-keyword-face) 290 291 (fontified t) 291 300 (fontified t face font-lock-type-face) 300 301 (fontified t) 301 304 (fontified t face font-lock-keyword-face) 304 305 (fontified t) 305 319 (fontified t face font-lock-type-face) 319 320 (fontified t) 320 321 (fontified t face (rainbow-delimiters-depth-1-face)) 321 322 (fontified t) 322 325 (fontified t) 325 327 (fontified t face font-lock-keyword-face) 327 328 (fontified t) 328 331 (fontified t face font-lock-function-name-face) 331 332 (fontified t face (rainbow-delimiters-depth-2-face)) 332 333 (fontified t face rust-ampersand-face) 333 337 (fontified t face font-lock-keyword-face) 337 338 (fontified t face (rainbow-delimiters-depth-2-face)) 338 340 (fontified t) 340 341 (fontified t syntax-table (1)) 341 342 (fontified t) 342 345 (fontified t face font-lock-type-face) 345 346 (fontified t) 346 347 (fontified t face (rainbow-delimiters-depth-2-face)) 347 348 (fontified t) 348 355 (fontified t) 355 357 (fontified t face font-lock-keyword-face) 357 358 (fontified t) 358 362 (fontified t face font-lock-keyword-face) 362 367 (fontified t) 367 368 (fontified t syntax-table (1)) 368 370 (fontified t) 370 374 (fontified t face font-lock-keyword-face) 374 375 (fontified t) 375 384 (fontified t) 384 388 (fontified t face font-lock-keyword-face) 388 393 (fontified t) 393 394 (fontified t syntax-table (1)) 394 396 (fontified t) 396 400 (fontified t face font-lock-keyword-face) 400 406 (fontified t) 406 407 (fontified t face (rainbow-delimiters-depth-3-face)) 407 408 (fontified t) 408 412 (fontified t) 412 415 (fontified t face font-lock-type-face) 415 417 (fontified t) 417 420 (fontified t face font-lock-type-face) 420 421 (fontified t) 421 428 (fontified t) 428 429 (fontified t face (rainbow-delimiters-depth-3-face)) 429 430 (fontified t) 430 437 (fontified t) 437 441 (fontified t face font-lock-keyword-face) 441 442 (fontified t) 442 444 (fontified t face font-lock-keyword-face) 444 445 (fontified t) 445 449 (fontified t face font-lock-keyword-face) 449 456 (fontified t) 456 457 (fontified t syntax-table (1)) 457 459 (fontified t) 459 463 (fontified t face font-lock-keyword-face) 463 464 (fontified t) 464 471 (fontified t) 471 475 (fontified t face font-lock-keyword-face) 475 476 (fontified t) 476 482 (fontified t) 482 483 (fontified t syntax-table (1)) 483 485 (fontified t) 485 489 (fontified t face font-lock-keyword-face) 489 495 (fontified t) 495 496 (fontified t face (rainbow-delimiters-depth-3-face)) 496 497 (fontified t) 497 501 (fontified t) 501 504 (fontified t face font-lock-type-face) 504 506 (fontified t) 506 511 (fontified t face font-lock-type-face) 511 512 (fontified t) 512 519 (fontified t) 519 520 (fontified t face (rainbow-delimiters-depth-3-face)) 520 521 (fontified t) 521 525 (fontified t face font-lock-keyword-face) 525 526 (fontified t) 526 527 (fontified t face (rainbow-delimiters-depth-3-face)) 527 528 (fontified t) 528 532 (fontified t) 532 535 (fontified t face font-lock-type-face) 535 537 (fontified t) 537 541 (fontified t face font-lock-type-face) 541 542 (fontified t) 542 549 (fontified t) 549 550 (fontified t face (rainbow-delimiters-depth-3-face)) 550 551 (fontified t) 551 554 (fontified t) 554 555 (fontified t face (rainbow-delimiters-depth-2-face)) 555 557 (fontified t) 557 558 (fontified t face (rainbow-delimiters-depth-1-face)) 558 559 (fontified t) 559 560 (fontified t) 560 562 (fontified t face font-lock-keyword-face) 562 563 (fontified t) 563 567 (fontified t face font-lock-function-name-face) 567 568 (fontified t face (rainbow-delimiters-depth-1-face)) 568 569 (fontified t face (rainbow-delimiters-depth-1-face)) 569 570 (fontified t) 570 571 (fontified t face (rainbow-delimiters-depth-1-face)) 571 572 (fontified t) 572 576 (fontified t) 576 579 (fontified t face font-lock-keyword-face) 579 580 (fontified t) 580 585 (fontified t face font-lock-variable-name-face) 585 588 (fontified t) 588 593 (fontified t face font-lock-constant-face) 593 595 (fontified t) 595 597 (fontified t face font-lock-constant-face) 597 599 (fontified t) 599 605 (fontified t face font-lock-type-face) 605 607 (fontified t) 607 611 (fontified t) 611 612 (fontified t face (rainbow-delimiters-depth-2-face)) 612 613 (fontified t face font-lock-string-face) 613 706 (fontified t face font-lock-string-face) 706 707 (fontified t rear-nonsticky t face font-lock-string-face) 707 708 (fontified t face font-lock-string-face) 708 709 (fontified t face (rainbow-delimiters-depth-2-face)) 709 710 (fontified t) 710 716 (fontified t) 716 717 (fontified t face (rainbow-delimiters-depth-2-face)) 717 718 (fontified t face (rainbow-delimiters-depth-2-face)) 718 719 (fontified t) 719 725 (fontified t) 725 726 (fontified t face (rainbow-delimiters-depth-2-face)) 726 727 (fontified t face (rainbow-delimiters-depth-2-face)) 727 728 (fontified t) 728 734 (fontified t) 734 735 (fontified t face (rainbow-delimiters-depth-2-face)) 735 736 (fontified t face (rainbow-delimiters-depth-2-face)) 736 737 (fontified t) 737 746 (fontified t) 746 747 (fontified t face (rainbow-delimiters-depth-2-face)) 747 748 (fontified t) 748 751 (fontified t) 751 757 (fontified t) 757 758 (fontified t face (rainbow-delimiters-depth-2-face)) 758 766 (fontified t) 766 767 (fontified t face (rainbow-delimiters-depth-2-face)) 767 768 (fontified t face (rainbow-delimiters-depth-2-face)) 768 769 (fontified t) 769 770 (fontified t) 770 774 (fontified t) 774 777 (fontified t face font-lock-keyword-face) 777 778 (fontified t) 778 784 (fontified t face font-lock-variable-name-face) 784 787 (fontified t) 787 793 (fontified t) 793 799 (fontified t) 799 800 (fontified t face (rainbow-delimiters-depth-2-face)) 800 801 (fontified t face (rainbow-delimiters-depth-2-face)) 801 802 (fontified t) 802 809 (fontified t) 809 811 (fontified t) 811 812 (fontified t face (rainbow-delimiters-depth-2-face)) 812 815 (fontified t face font-lock-type-face) 815 816 (fontified t face (rainbow-delimiters-depth-3-face)) 816 817 (fontified t) 817 818 (fontified t face (rainbow-delimiters-depth-3-face)) 818 819 (fontified t face (rainbow-delimiters-depth-2-face)) 819 820 (fontified t face (rainbow-delimiters-depth-2-face)) 820 821 (fontified t face (rainbow-delimiters-depth-2-face)) 821 822 (fontified t) 822 823 (fontified t) 823 827 (fontified t) 827 830 (fontified t face font-lock-keyword-face) 830 831 (fontified t) 831 834 (fontified t face font-lock-keyword-face) 834 835 (fontified t) 835 855 (fontified t face font-lock-variable-name-face) 855 858 (fontified t) 858 872 (fontified t face font-lock-type-face) 872 873 (fontified t face (rainbow-delimiters-depth-2-face)) 873 876 (fontified t face font-lock-variable-name-face) 876 879 (fontified t) 879 884 (fontified t face font-lock-variable-name-face) 884 887 (fontified t) 887 891 (fontified t face font-lock-variable-name-face) 891 893 (fontified t) 893 894 (fontified t face (rainbow-delimiters-depth-2-face)) 894 895 (fontified t) 895 896 (fontified t) 896 900 (fontified t) 900 903 (fontified t face font-lock-keyword-face) 903 904 (fontified t) 904 909 (fontified t face font-lock-variable-name-face) 909 910 (fontified t) 910 912 (fontified t face font-lock-keyword-face) 912 924 (fontified t) 924 925 (fontified t face (rainbow-delimiters-depth-2-face)) 925 926 (fontified t face (rainbow-delimiters-depth-2-face)) 926 927 (fontified t) 927 928 (fontified t face (rainbow-delimiters-depth-2-face)) 928 929 (fontified t) 929 930 (fontified t) 930 935 (fontified t face font-lock-keyword-face) 935 942 (fontified t) 942 945 (fontified t) 945 946 (fontified t face (rainbow-delimiters-depth-3-face)) 946 947 (fontified t face (rainbow-delimiters-depth-3-face)) 947 948 (fontified t) 948 949 (fontified t face (rainbow-delimiters-depth-3-face)) 949 950 (fontified t) 950 955 (fontified t) 955 958 (fontified t face font-lock-type-face) 958 960 (fontified t) 960 963 (fontified t face font-lock-type-face) 963 965 (fontified t) 965 966 (syntax-table (1) fontified t) 966 967 (fontified t) 967 968 (fontified t face (rainbow-delimiters-depth-4-face)) 968 989 (fontified t) 989 997 (fontified t) 997 998 (fontified t face (rainbow-delimiters-depth-4-face)) 998 1000 (fontified t) 1000 1005 (fontified t) 1005 1008 (fontified t face font-lock-type-face) 1008 1010 (fontified t) 1010 1015 (fontified t face font-lock-type-face) 1015 1017 (fontified t) 1017 1018 (syntax-table (1) fontified t) 1018 1019 (fontified t) 1019 1020 (fontified t face (rainbow-delimiters-depth-4-face)) 1020 1041 (fontified t) 1041 1050 (fontified t) 1050 1051 (fontified t face (rainbow-delimiters-depth-4-face)) 1051 1053 (fontified t) 1053 1058 (fontified t) 1058 1061 (fontified t face font-lock-type-face) 1061 1063 (fontified t) 1063 1067 (fontified t face font-lock-type-face) 1067 1069 (fontified t) 1069 1070 (syntax-table (1) fontified t) 1070 1071 (fontified t) 1071 1072 (fontified t face (rainbow-delimiters-depth-4-face)) 1072 1093 (fontified t) 1093 1101 (fontified t) 1101 1102 (fontified t face (rainbow-delimiters-depth-4-face)) 1102 1103 (fontified t) 1103 1104 (fontified t)) . 219) (undo-tree-id0 . -709) (undo-tree-id1 . 395) (undo-tree-id2 . -736) (undo-tree-id3 . -430) (undo-tree-id4 . -279) (undo-tree-id5 . -767) (undo-tree-id6 . 347) (undo-tree-id7 . -612) (undo-tree-id8 . -736) (undo-tree-id9 . -736) (undo-tree-id10 . -736) (undo-tree-id11 . -736) (undo-tree-id12 . -736) (t 25815 55862 839334 153000)) nil (25815 56014 504141 552000) 0 nil])
([nil nil ((1028 . 1030) (1005 . 1007) (993 . 995) (982 . 984) (971 . 973) (t 25815 55950 440117 660000)) nil (25815 56014 504119 22000) 0 nil])
([nil nil ((1494 . 1495) (1473 . 1493) (#("max" 0 3 (fontified nil)) . 1473) (1473 . 1476) (#("max_component_counts" 0 20 (fontified nil)) . -1473) (1473 . 1493) (#("max" 0 3 (fontified t)) . -1473) (undo-tree-id13 . -3) 1476 (1473 . 1476) (1472 . 1473) (1468 . 1470) (#("}" 0 1 (fontified nil)) . -1468) (1468 . 1469) (#("}" 0 1 (fontified nil face rust-string-interpolation)) . -1468) (1468 . 1469) (1467 . 1469) (1466 . 1468) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -1466) (1466 . 1467) (apply yas--snippet-revive 1457 1467 #s(yas--snippet nil nil #s(yas--exit 1466 nil) 34 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1466 nil) 34 nil nil nil nil)) (1457 . 1467) (#("println!($0)" 0 12 (fontified nil)) . 1457) (1457 . 1469) (#("prin" 0 4 (fontified nil)) . 1457) (1457 . 1461) (#("println!(…)" 0 11 (fontified nil)) . -1457) (1457 . 1468) (#("prin" 0 4 (fontified t)) . -1457) (undo-tree-id14 . -4) 1461 (1457 . 1461) (1452 . 1457) (t 25815 56014 536681 968000) 1451) nil (25815 56045 707985 263000) 0 nil])
([nil nil ((apply yas--snippet-revive 64 77 #s(yas--snippet nil (#s(yas--field 0 71 76 nil nil nil nil nil)) nil 35 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 0 71 76 nil nil nil nil nil)) nil 35 nil nil nil nil)) (64 . 77) (#("derive(${0:Debug})" 0 18 (fontified nil)) . 64) (64 . 82) (#("der" 0 3 (fontified nil)) . 64) (64 . 67) (#("derive(…)" 0 9 (fontified nil)) . -64) (64 . 73) (#("der" 0 3 (fontified t face font-lock-preprocessor-face)) . -64) (undo-tree-id24 . -3) 67 (66 . 67) (#("." 0 1 (fontified t face font-lock-preprocessor-face)) . -66) (undo-tree-id25 . -1) (#("
" 0 1 (fontified t face font-lock-preprocessor-face)) . -67) (undo-tree-id26 . -1) 68 (67 . 68) (66 . 67) (64 . 66) (62 . 65) (62 . 63) 69 (t 25815 56045 716954 48000)) nil (25815 56067 970546 764000) 0 nil])
([nil nil ((#("#[derive(Debug)]
" 0 1 (fontified t face font-lock-preprocessor-face) 1 2 (fontified t face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face)) 2 8 (fontified t face font-lock-preprocessor-face) 8 9 (fontified t face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face)) 9 14 (fontified t face font-lock-preprocessor-face) 14 15 (fontified t face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face)) 15 16 (fontified t face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face)) 16 17 (fontified t)) . 62) (undo-tree-id15 . -17) (undo-tree-id16 . 8) (undo-tree-id17 . -16) (undo-tree-id18 . -8) (undo-tree-id19 . 3) (undo-tree-id20 . -13) (undo-tree-id21 . -8) (undo-tree-id22 . -9) (undo-tree-id23 . -14)) nil (25815 56067 970543 24000) 0 nil])
([nil nil ((apply yas--snippet-revive 64 77 #s(yas--snippet nil (#s(yas--field 0 71 76 nil nil nil nil nil)) nil 36 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 0 71 76 nil nil nil nil nil)) nil 36 nil nil nil nil)) (64 . 77) (#("derive(${0:Debug})" 0 18 (fontified nil)) . 64) (64 . 82) (#("de" 0 2 (fontified nil)) . 64) (64 . 66) (#("derive(…)" 0 9 (fontified nil)) . -64) (64 . 73) (#("de" 0 2 (fontified t face font-lock-preprocessor-face)) . -64) (undo-tree-id27 . -2) 66 (64 . 66) (62 . 65) (62 . 63) (t 25815 56068 377150 861000)) nil (25815 56075 379111 995000) 0 nil])
([nil nil ((1486 . 1487) (t 25815 56075 405211 747000)) nil (25815 56173 392575 862000) 0 nil])
([nil nil ((1491 . 1492) (t 25815 56173 858057 751000)) nil (25815 56471 187808 277000) 0 nil])
([nil nil ((#("    println!(\"{:#?}\", max_component_counts);
" 0 4 (fontified t) 4 12 (fontified t face rust-builtin-formatting-macro) 12 13 (fontified t face (rainbow-delimiters-depth-2-face)) 13 14 (fontified t face font-lock-string-face) 14 18 (fontified t face rust-string-interpolation) 18 19 (fontified t face rust-string-interpolation) 19 20 (fontified t face font-lock-string-face) 20 21 (fontified t) 21 22 (fontified t) 22 42 (fontified t) 42 43 (fontified t face (rainbow-delimiters-depth-2-face)) 43 44 (fontified t) 44 45 (fontified t)) . 1470) (undo-tree-id28 . -43) (undo-tree-id29 . 28) (undo-tree-id30 . -44) (undo-tree-id31 . -45) (undo-tree-id32 . -21) (undo-tree-id33 . -45) (undo-tree-id34 . -43) (undo-tree-id35 . -43) 1513) nil (25815 56471 187807 477000) 0 nil])
([nil nil ((1479 . 1483) (1482 . 1486) (1474 . 1482) (1469 . 1474) 1468) nil (25815 56471 187797 947000) 0 nil])
([nil nil ((1506 . 1511) (#("=" 0 1 (fontified t)) . -1506) (undo-tree-id36 . -1) (#(" " 0 1 (fontified t)) . -1507) (undo-tree-id37 . -1) (#("^" 0 1 (fontified t)) . -1508) (undo-tree-id38 . -1) 1509 (1508 . 1509) (1504 . 1508) (1501 . 1504) (#(" " 0 1 (fontified t)) . -1501) (undo-tree-id39 . -1) 1502 (1495 . 1502) (1490 . 1495) (t 25815 56471 752555 968000) 1482) nil (25815 56538 557298 581000) 0 nil])
([nil nil ((1507 . 1512) (#("x" 0 1 (fontified t)) . -1507) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) 1508 (1507 . 1508) (1506 . 1507) (#("=" 0 1 (fontified t)) . -1506) (undo-tree-id43 . -1) (#(" " 0 1 (fontified t)) . -1507) (undo-tree-id44 . -1) (#("x" 0 1 (fontified t)) . -1508) (undo-tree-id45 . -1) 1509 (1506 . 1509) (#("^" 0 1 (fontified t)) . -1506) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (#("=" 0 1 (fontified t)) . -1507) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (#(" " 0 1 (fontified t)) . -1508) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (#("x" 0 1 (fontified t)) . -1509) (undo-tree-id52 . -1) (undo-tree-id53 . -1) 1510 (t 25815 56538 565106 880000)) nil (25815 56567 441471 626000) 0 nil])
([nil nil ((#("5;" 0 2 (fontified t)) . 1511) (undo-tree-id68 . 1) (undo-tree-id69 . -1) (undo-tree-id70 . 1) (t 25815 56567 469344 374000)) nil (25815 56584 542793 700000) 0 nil])
([nil nil ((#("5" 0 1 (fontified t)) . 1510) (undo-tree-id67 . -1)) nil (25815 56584 542792 500000) 0 nil])
([nil nil ((#("2" 0 1 (fontified t)) . 1509) (undo-tree-id66 . -1)) nil (25815 56584 542791 720000) 0 nil])
([nil nil ((#("    let x : u8 ^= 
" 0 4 (fontified t) 4 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 9 (fontified t face font-lock-variable-name-face) 9 12 (fontified t) 12 14 (fontified t face font-lock-type-face) 14 18 (fontified t) 18 19 (fontified t)) . 1491) (undo-tree-id54 . 1) (undo-tree-id55 . -18) (undo-tree-id56 . -19) (undo-tree-id57 . -19) (undo-tree-id58 . -19) (undo-tree-id59 . -19) (undo-tree-id60 . -19) (undo-tree-id61 . -19) (undo-tree-id62 . 1) (undo-tree-id63 . -18) (undo-tree-id64 . -17) (undo-tree-id65 . -19) 1508) nil (25815 56584 542789 320000) 0 nil])
([nil nil ((1501 . 1506) (#("=" 0 1 (fontified t)) . -1501) (undo-tree-id71 . -1) (#(" " 0 1 (fontified t)) . -1502) (undo-tree-id72 . -1) 1503 (1495 . 1503) (1491 . 1495) (1491 . 1492) (t 25815 56584 961487 891000)) nil (25815 56605 3742 210000) 0 nil])
([nil nil ((1502 . 1512) (#(" " 0 1 (fontified t)) . -1502) (undo-tree-id73 . -1) (undo-tree-id74 . -1) 1503 (#("y" 0 1 (fontified t face font-lock-variable-name-face)) . -1503) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (#(" " 0 1 (fontified t)) . -1504) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (#("=" 0 1 (fontified t)) . -1505) (undo-tree-id79 . -1) (#(" " 0 1 (fontified t)) . -1506) (undo-tree-id80 . -1) (#("0" 0 1 (fontified t)) . -1507) (undo-tree-id81 . -1) 1508 (1505 . 1508) (#("^" 0 1 (fontified t)) . -1505) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (#("=" 0 1 (fontified t)) . -1506) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (#(" " 0 1 (fontified t)) . -1507) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (#("x" 0 1 (fontified t)) . -1508) (undo-tree-id88 . -1) (undo-tree-id89 . -1) 1509 (1499 . 1503) (t 25815 56605 29652 347000)) nil (25815 56637 640663 797000) 0 nil])
([nil nil ((1518 . 1519) (1513 . 1518) (t 25815 56637 645919 206000) 1512) nil (25815 56653 357038 346000) 0 nil])
([nil nil ((1511 . 1514) (#("0" 0 1 (fontified t)) . -1511) (undo-tree-id90 . -1) 1512) nil (25815 56653 357037 646000) 0 nil])
([nil nil ((1521 . 1527)) nil (25815 56653 357029 356000) 0 nil])
([nil nil ((1543 . 1546) (1544 . 1545) (#("}" 0 1 (fontified nil)) . -1543) (1543 . 1544) (#("}" 0 1 (fontified nil face rust-string-interpolation)) . -1543) (1543 . 1544) (1542 . 1544) (1543 . 1546) (1542 . 1544) (1541 . 1543) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -1541) (1541 . 1542) (apply yas--snippet-revive 1532 1542 #s(yas--snippet nil nil #s(yas--exit 1541 nil) 37 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1541 nil) 37 nil nil nil nil)) (1532 . 1542) (#("println!($0)" 0 12 (fontified nil)) . 1532) (1532 . 1544) (#("prin" 0 4 (fontified nil)) . 1532) (1532 . 1536) (#("println!(…)" 0 11 (fontified nil)) . -1532) (1532 . 1543) (#("prin" 0 4 (fontified t)) . -1532) (undo-tree-id91 . -4) 1536 (1532 . 1536) (1527 . 1532) (t 25815 56653 362047 604000) 1526) nil (25815 56704 356113 956000) 0 nil])
([nil nil ((1555 . 1556)) nil (25815 56704 356105 636000) 0 nil])
([nil nil ((#("2" 0 1 (fontified t)) . 1511) (t 25815 56704 774466 877000)) nil (25815 56760 927613 910000) 0 nil])
([nil nil ((#("5" 0 1 (fontified t)) . 1511)) nil (25815 56760 927613 420000) 0 nil])
([nil nil ((#("5" 0 1 (fontified t)) . 1511)) nil (25815 56760 927612 990000) 0 nil])
([nil nil ((1511 . 1514)) nil (25815 56760 927610 810000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . 1511) (t 25815 56761 331281 613000)) nil (25815 56843 29631 934000) 0 nil])
([nil nil ((#("^" 0 1 (fontified t)) . 1511)) nil (25815 56843 29631 634000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . 1511)) nil (25815 56843 29630 964000) 0 nil])
([nil nil ((1511 . 1513)) nil (25815 56843 29628 364000) 0 nil])
([nil nil ((#("    y ^= x;
" 0 11 (fontified t) 11 12 (fontified t)) . 1515) (undo-tree-id92 . -11) (undo-tree-id93 . -11) (undo-tree-id94 . -10) 1525 (t 25815 56843 432653 888000)) nil (25815 56846 713677 672000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t face font-lock-keyword-face)) . 1499) (t 25815 56846 724706 988000)) nil (25815 56866 682789 773000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face font-lock-variable-name-face)) . 1499)) nil (25815 56866 682789 513000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face font-lock-variable-name-face)) . 1499)) nil (25815 56866 682789 253000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 1499)) nil (25815 56866 682788 733000) 0 nil])
([nil nil ((1486 . 1489) (#("2" 0 1 (fontified t)) . -1486) (undo-tree-id95 . -1) 1487 (1486 . 1487) (#("255" 0 3 (fontified t)) . 1486) (undo-tree-id96 . -2) (undo-tree-id97 . -3) (undo-tree-id98 . -3)) nil (25815 56866 682786 913000) 0 nil])
([nil nil ((#("    let x: u8 = 128;
" 0 4 (fontified t) 4 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 9 (fontified t face font-lock-variable-name-face) 9 11 (fontified t) 11 13 (fontified t face font-lock-type-face) 13 20 (fontified t) 20 21 (fontified t)) . 1470) (undo-tree-id715 . -20) (undo-tree-id716 . 2) (undo-tree-id717 . -20) (undo-tree-id718 . -21) (undo-tree-id719 . -21) (undo-tree-id720 . -21) (undo-tree-id721 . -21) (undo-tree-id722 . -21) (undo-tree-id723 . 2) (undo-tree-id724 . -18) (undo-tree-id725 . -19) (undo-tree-id726 . -21) 1489 (t 25815 56866 709026 363000)) nil (25815 56901 321642 449000) 0 nil])
([nil nil ((#("    let y: u8 = !x;
" 0 4 (fontified t) 4 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 9 (fontified t face font-lock-variable-name-face) 9 11 (fontified t) 11 13 (fontified t face font-lock-type-face) 13 18 (fontified t) 18 19 (fontified t) 19 20 (fontified t)) . 1470) (undo-tree-id707 . 20) (undo-tree-id708 . -19) (undo-tree-id709 . 20) (undo-tree-id710 . -18) (undo-tree-id711 . -8) (undo-tree-id712 . -13) (undo-tree-id713 . -8) (undo-tree-id714 . -12) 1488) nil (25815 56901 321638 99000) 0 nil])
([nil current ((#("    println!(\"{x:b},{y:b}\");
" 0 4 (fontified t) 4 12 (fontified t face rust-builtin-formatting-macro) 12 13 (fontified t face (rainbow-delimiters-depth-2-face)) 13 14 (fontified t face font-lock-string-face) 14 18 (fontified t face rust-string-interpolation) 18 19 (fontified t face rust-string-interpolation) 19 20 (fontified t face font-lock-string-face) 20 25 (fontified t face rust-string-interpolation) 25 26 (fontified t face font-lock-string-face) 26 27 (fontified t face (rainbow-delimiters-depth-2-face)) 27 28 (fontified t) 28 29 (fontified t)) . 1470) (undo-tree-id99 . 29) (undo-tree-id100 . -28) (undo-tree-id101 . -20) (undo-tree-id102 . 29) (undo-tree-id103 . -18) (undo-tree-id104 . -28) (undo-tree-id105 . -18) (undo-tree-id106 . -18) (undo-tree-id107 . -18) (undo-tree-id108 . -18) (undo-tree-id109 . -18) (undo-tree-id110 . -18) (undo-tree-id111 . -18) (undo-tree-id112 . -18) (undo-tree-id113 . -18) (undo-tree-id114 . -18) (undo-tree-id115 . -18) (undo-tree-id116 . -18) (undo-tree-id117 . -18) (undo-tree-id118 . -18) (undo-tree-id119 . -18) (undo-tree-id120 . -18) (undo-tree-id121 . -18) (undo-tree-id122 . -18) (undo-tree-id123 . -18) (undo-tree-id124 . -18) (undo-tree-id125 . -18) (undo-tree-id126 . -18) (undo-tree-id127 . -18) (undo-tree-id128 . -18) (undo-tree-id129 . -18) (undo-tree-id130 . -18) (undo-tree-id131 . -18) (undo-tree-id132 . -18) (undo-tree-id133 . -18) (undo-tree-id134 . -18) (undo-tree-id135 . -18) (undo-tree-id136 . -18) (undo-tree-id137 . -18) (undo-tree-id138 . -18) (undo-tree-id139 . -18) (undo-tree-id140 . -18) (undo-tree-id141 . -18) (undo-tree-id142 . -18) (undo-tree-id143 . -18) (undo-tree-id144 . -18) (undo-tree-id145 . -18) (undo-tree-id146 . -18) (undo-tree-id147 . -18) (undo-tree-id148 . -18) (undo-tree-id149 . -18) (undo-tree-id150 . -18) (undo-tree-id151 . -18) (undo-tree-id152 . -18) (undo-tree-id153 . -18) (undo-tree-id154 . -18) (undo-tree-id155 . -18) (undo-tree-id156 . -18) (undo-tree-id157 . -18) (undo-tree-id158 . -18) (undo-tree-id159 . -18) (undo-tree-id160 . -18) (undo-tree-id161 . -18) (undo-tree-id162 . -18) (undo-tree-id163 . -18) (undo-tree-id164 . -18) (undo-tree-id165 . -18) (undo-tree-id166 . -18) (undo-tree-id167 . -18) (undo-tree-id168 . -18) (undo-tree-id169 . -18) (undo-tree-id170 . -18) (undo-tree-id171 . -18) (undo-tree-id172 . -18) (undo-tree-id173 . -18) (undo-tree-id174 . -18) (undo-tree-id175 . -18) (undo-tree-id176 . -18) (undo-tree-id177 . -18) (undo-tree-id178 . -18) (undo-tree-id179 . -18) (undo-tree-id180 . -18) (undo-tree-id181 . -18) (undo-tree-id182 . -18) (undo-tree-id183 . -18) (undo-tree-id184 . -18) (undo-tree-id185 . -18) (undo-tree-id186 . -18) (undo-tree-id187 . -18) (undo-tree-id188 . -18) (undo-tree-id189 . -18) (undo-tree-id190 . -18) (undo-tree-id191 . -18) (undo-tree-id192 . -18) (undo-tree-id193 . -18) (undo-tree-id194 . -18) (undo-tree-id195 . -18) (undo-tree-id196 . -18) (undo-tree-id197 . -18) (undo-tree-id198 . -18) (undo-tree-id199 . -18) (undo-tree-id200 . -18) (undo-tree-id201 . -18) (undo-tree-id202 . -18) (undo-tree-id203 . -18) (undo-tree-id204 . -18) (undo-tree-id205 . -18) (undo-tree-id206 . -18) (undo-tree-id207 . -18) (undo-tree-id208 . -18) (undo-tree-id209 . -18) (undo-tree-id210 . -18) (undo-tree-id211 . -18) (undo-tree-id212 . -18) (undo-tree-id213 . -18) (undo-tree-id214 . -18) (undo-tree-id215 . -18) (undo-tree-id216 . -18) (undo-tree-id217 . -18) (undo-tree-id218 . -18) (undo-tree-id219 . -18) (undo-tree-id220 . -18) (undo-tree-id221 . -18) (undo-tree-id222 . -18) (undo-tree-id223 . -18) (undo-tree-id224 . -18) (undo-tree-id225 . -18) (undo-tree-id226 . -18) (undo-tree-id227 . -18) (undo-tree-id228 . -18) (undo-tree-id229 . -18) (undo-tree-id230 . -18) (undo-tree-id231 . -18) (undo-tree-id232 . -18) (undo-tree-id233 . -18) (undo-tree-id234 . -18) (undo-tree-id235 . -18) (undo-tree-id236 . -18) (undo-tree-id237 . -18) (undo-tree-id238 . -18) (undo-tree-id239 . -18) (undo-tree-id240 . -18) (undo-tree-id241 . -18) (undo-tree-id242 . -18) (undo-tree-id243 . -18) (undo-tree-id244 . -18) (undo-tree-id245 . -18) (undo-tree-id246 . -18) (undo-tree-id247 . -18) (undo-tree-id248 . -18) (undo-tree-id249 . -18) (undo-tree-id250 . -18) (undo-tree-id251 . -18) (undo-tree-id252 . -18) (undo-tree-id253 . -18) (undo-tree-id254 . -18) (undo-tree-id255 . -18) (undo-tree-id256 . -18) (undo-tree-id257 . -18) (undo-tree-id258 . -18) (undo-tree-id259 . -18) (undo-tree-id260 . -18) (undo-tree-id261 . -18) (undo-tree-id262 . -18) (undo-tree-id263 . -18) (undo-tree-id264 . -18) (undo-tree-id265 . -18) (undo-tree-id266 . -18) (undo-tree-id267 . -18) (undo-tree-id268 . -18) (undo-tree-id269 . -18) (undo-tree-id270 . -18) (undo-tree-id271 . -18) (undo-tree-id272 . -18) (undo-tree-id273 . -18) (undo-tree-id274 . -18) (undo-tree-id275 . -18) (undo-tree-id276 . -18) (undo-tree-id277 . -18) (undo-tree-id278 . -18) (undo-tree-id279 . -18) (undo-tree-id280 . -18) (undo-tree-id281 . -18) (undo-tree-id282 . -18) (undo-tree-id283 . -18) (undo-tree-id284 . -18) (undo-tree-id285 . -18) (undo-tree-id286 . -18) (undo-tree-id287 . -18) (undo-tree-id288 . -18) (undo-tree-id289 . -18) (undo-tree-id290 . -18) (undo-tree-id291 . -18) (undo-tree-id292 . -18) (undo-tree-id293 . -18) (undo-tree-id294 . -18) (undo-tree-id295 . -18) (undo-tree-id296 . -18) (undo-tree-id297 . -18) (undo-tree-id298 . -18) (undo-tree-id299 . -18) (undo-tree-id300 . -18) (undo-tree-id301 . -18) (undo-tree-id302 . -18) (undo-tree-id303 . -18) (undo-tree-id304 . -18) (undo-tree-id305 . -18) (undo-tree-id306 . -18) (undo-tree-id307 . -18) (undo-tree-id308 . -18) (undo-tree-id309 . -18) (undo-tree-id310 . -18) (undo-tree-id311 . -18) (undo-tree-id312 . -18) (undo-tree-id313 . -18) (undo-tree-id314 . -18) (undo-tree-id315 . -18) (undo-tree-id316 . -18) (undo-tree-id317 . -18) (undo-tree-id318 . -18) (undo-tree-id319 . -18) (undo-tree-id320 . -18) (undo-tree-id321 . -18) (undo-tree-id322 . -18) (undo-tree-id323 . -18) (undo-tree-id324 . -18) (undo-tree-id325 . -18) (undo-tree-id326 . -18) (undo-tree-id327 . -18) (undo-tree-id328 . -18) (undo-tree-id329 . -18) (undo-tree-id330 . -18) (undo-tree-id331 . -18) (undo-tree-id332 . -18) (undo-tree-id333 . -18) (undo-tree-id334 . -18) (undo-tree-id335 . -18) (undo-tree-id336 . -18) (undo-tree-id337 . -18) (undo-tree-id338 . -18) (undo-tree-id339 . -18) (undo-tree-id340 . -18) (undo-tree-id341 . -18) (undo-tree-id342 . -18) (undo-tree-id343 . 11) (undo-tree-id344 . -19) (undo-tree-id345 . 15) (undo-tree-id346 . -15) (undo-tree-id347 . -18) (undo-tree-id348 . -18) (undo-tree-id349 . -18) (undo-tree-id350 . -18) (undo-tree-id351 . -18) (undo-tree-id352 . -18) (undo-tree-id353 . -18) (undo-tree-id354 . -18) (undo-tree-id355 . -18) (undo-tree-id356 . -18) (undo-tree-id357 . -18) (undo-tree-id358 . -18) (undo-tree-id359 . -18) (undo-tree-id360 . -18) (undo-tree-id361 . -18) (undo-tree-id362 . -18) (undo-tree-id363 . -18) (undo-tree-id364 . -18) (undo-tree-id365 . -18) (undo-tree-id366 . -18) (undo-tree-id367 . -18) (undo-tree-id368 . -18) (undo-tree-id369 . -18) (undo-tree-id370 . -18) (undo-tree-id371 . -18) (undo-tree-id372 . -18) (undo-tree-id373 . -18) (undo-tree-id374 . -18) (undo-tree-id375 . -18) (undo-tree-id376 . -18) (undo-tree-id377 . -18) (undo-tree-id378 . -18) (undo-tree-id379 . -18) (undo-tree-id380 . -18) (undo-tree-id381 . -18) (undo-tree-id382 . -18) (undo-tree-id383 . -18) (undo-tree-id384 . -18) (undo-tree-id385 . -18) (undo-tree-id386 . -18) (undo-tree-id387 . -18) (undo-tree-id388 . -18) (undo-tree-id389 . -18) (undo-tree-id390 . -18) (undo-tree-id391 . -18) (undo-tree-id392 . -18) (undo-tree-id393 . -18) (undo-tree-id394 . -18) (undo-tree-id395 . -18) (undo-tree-id396 . -18) (undo-tree-id397 . -18) (undo-tree-id398 . -18) (undo-tree-id399 . -18) (undo-tree-id400 . -18) (undo-tree-id401 . -18) (undo-tree-id402 . -18) (undo-tree-id403 . -18) (undo-tree-id404 . -18) (undo-tree-id405 . -18) (undo-tree-id406 . -18) (undo-tree-id407 . -18) (undo-tree-id408 . -18) (undo-tree-id409 . -18) (undo-tree-id410 . -18) (undo-tree-id411 . -18) (undo-tree-id412 . -18) (undo-tree-id413 . -18) (undo-tree-id414 . -18) (undo-tree-id415 . -18) (undo-tree-id416 . -18) (undo-tree-id417 . -18) (undo-tree-id418 . -18) (undo-tree-id419 . -18) (undo-tree-id420 . -18) (undo-tree-id421 . -18) (undo-tree-id422 . -18) (undo-tree-id423 . -18) (undo-tree-id424 . -18) (undo-tree-id425 . -18) (undo-tree-id426 . -18) (undo-tree-id427 . -18) (undo-tree-id428 . -18) (undo-tree-id429 . -18) (undo-tree-id430 . -18) (undo-tree-id431 . -18) (undo-tree-id432 . -18) (undo-tree-id433 . -18) (undo-tree-id434 . -18) (undo-tree-id435 . -18) (undo-tree-id436 . -18) (undo-tree-id437 . -18) (undo-tree-id438 . -18) (undo-tree-id439 . -18) (undo-tree-id440 . -18) (undo-tree-id441 . -18) (undo-tree-id442 . -18) (undo-tree-id443 . -18) (undo-tree-id444 . -18) (undo-tree-id445 . -18) (undo-tree-id446 . -18) (undo-tree-id447 . -18) (undo-tree-id448 . -18) (undo-tree-id449 . -18) (undo-tree-id450 . -18) (undo-tree-id451 . -18) (undo-tree-id452 . -18) (undo-tree-id453 . -18) (undo-tree-id454 . -18) (undo-tree-id455 . -18) (undo-tree-id456 . -18) (undo-tree-id457 . -18) (undo-tree-id458 . -18) (undo-tree-id459 . -18) (undo-tree-id460 . -18) (undo-tree-id461 . -18) (undo-tree-id462 . -18) (undo-tree-id463 . -18) (undo-tree-id464 . -18) (undo-tree-id465 . -18) (undo-tree-id466 . -18) (undo-tree-id467 . -18) (undo-tree-id468 . -18) (undo-tree-id469 . -18) (undo-tree-id470 . -18) (undo-tree-id471 . -18) (undo-tree-id472 . -18) (undo-tree-id473 . -18) (undo-tree-id474 . -18) (undo-tree-id475 . -18) (undo-tree-id476 . -18) (undo-tree-id477 . -18) (undo-tree-id478 . -18) (undo-tree-id479 . -18) (undo-tree-id480 . -18) (undo-tree-id481 . -18) (undo-tree-id482 . -18) (undo-tree-id483 . -18) (undo-tree-id484 . -18) (undo-tree-id485 . -18) (undo-tree-id486 . -18) (undo-tree-id487 . -18) (undo-tree-id488 . -18) (undo-tree-id489 . -18) (undo-tree-id490 . -18) (undo-tree-id491 . -18) (undo-tree-id492 . -18) (undo-tree-id493 . -18) (undo-tree-id494 . -18) (undo-tree-id495 . -18) (undo-tree-id496 . -18) (undo-tree-id497 . -18) (undo-tree-id498 . -18) (undo-tree-id499 . -18) (undo-tree-id500 . -18) (undo-tree-id501 . -18) (undo-tree-id502 . -18) (undo-tree-id503 . -18) (undo-tree-id504 . -18) (undo-tree-id505 . -18) (undo-tree-id506 . -18) (undo-tree-id507 . -18) (undo-tree-id508 . -18) (undo-tree-id509 . -18) (undo-tree-id510 . -18) (undo-tree-id511 . -18) (undo-tree-id512 . -18) (undo-tree-id513 . -18) (undo-tree-id514 . -18) (undo-tree-id515 . -18) (undo-tree-id516 . -18) (undo-tree-id517 . -18) (undo-tree-id518 . -18) (undo-tree-id519 . -18) (undo-tree-id520 . -18) (undo-tree-id521 . -18) (undo-tree-id522 . -18) (undo-tree-id523 . -18) (undo-tree-id524 . -18) (undo-tree-id525 . -18) (undo-tree-id526 . -18) (undo-tree-id527 . -18) (undo-tree-id528 . -18) (undo-tree-id529 . -18) (undo-tree-id530 . -18) (undo-tree-id531 . -18) (undo-tree-id532 . -18) (undo-tree-id533 . -18) (undo-tree-id534 . -18) (undo-tree-id535 . -18) (undo-tree-id536 . -18) (undo-tree-id537 . -18) (undo-tree-id538 . -18) (undo-tree-id539 . -18) (undo-tree-id540 . -18) (undo-tree-id541 . -18) (undo-tree-id542 . -18) (undo-tree-id543 . -18) (undo-tree-id544 . -18) (undo-tree-id545 . -18) (undo-tree-id546 . -18) (undo-tree-id547 . -18) (undo-tree-id548 . -18) (undo-tree-id549 . -18) (undo-tree-id550 . -18) (undo-tree-id551 . -18) (undo-tree-id552 . -18) (undo-tree-id553 . -18) (undo-tree-id554 . -18) (undo-tree-id555 . -18) (undo-tree-id556 . -18) (undo-tree-id557 . -18) (undo-tree-id558 . -18) (undo-tree-id559 . -18) (undo-tree-id560 . -18) (undo-tree-id561 . -18) (undo-tree-id562 . -18) (undo-tree-id563 . -18) (undo-tree-id564 . -18) (undo-tree-id565 . -18) (undo-tree-id566 . -18) (undo-tree-id567 . -18) (undo-tree-id568 . -18) (undo-tree-id569 . -18) (undo-tree-id570 . -18) (undo-tree-id571 . -18) (undo-tree-id572 . -18) (undo-tree-id573 . -18) (undo-tree-id574 . -18) (undo-tree-id575 . -18) (undo-tree-id576 . -18) (undo-tree-id577 . -18) (undo-tree-id578 . -18) (undo-tree-id579 . -18) (undo-tree-id580 . -18) (undo-tree-id581 . -18) (undo-tree-id582 . -18) (undo-tree-id583 . -18) (undo-tree-id584 . -18) (undo-tree-id585 . -18) (undo-tree-id586 . -18) (undo-tree-id587 . -18) (undo-tree-id588 . -18) (undo-tree-id589 . -18) (undo-tree-id590 . -18) (undo-tree-id591 . -18) (undo-tree-id592 . -18) (undo-tree-id593 . -18) (undo-tree-id594 . -18) (undo-tree-id595 . -18) (undo-tree-id596 . -18) (undo-tree-id597 . -18) (undo-tree-id598 . -18) (undo-tree-id599 . -18) (undo-tree-id600 . -18) (undo-tree-id601 . -18) (undo-tree-id602 . -18) (undo-tree-id603 . -18) (undo-tree-id604 . -18) (undo-tree-id605 . -18) (undo-tree-id606 . -18) (undo-tree-id607 . -18) (undo-tree-id608 . -18) (undo-tree-id609 . -18) (undo-tree-id610 . -18) (undo-tree-id611 . -18) (undo-tree-id612 . -18) (undo-tree-id613 . -18) (undo-tree-id614 . -18) (undo-tree-id615 . -18) (undo-tree-id616 . -18) (undo-tree-id617 . -18) (undo-tree-id618 . -18) (undo-tree-id619 . -18) (undo-tree-id620 . -18) (undo-tree-id621 . -18) (undo-tree-id622 . -18) (undo-tree-id623 . -18) (undo-tree-id624 . -18) (undo-tree-id625 . -18) (undo-tree-id626 . -18) (undo-tree-id627 . -18) (undo-tree-id628 . -18) (undo-tree-id629 . -18) (undo-tree-id630 . -18) (undo-tree-id631 . -18) (undo-tree-id632 . -18) (undo-tree-id633 . -18) (undo-tree-id634 . -18) (undo-tree-id635 . -18) (undo-tree-id636 . -18) (undo-tree-id637 . -18) (undo-tree-id638 . -18) (undo-tree-id639 . -18) (undo-tree-id640 . -18) (undo-tree-id641 . -18) (undo-tree-id642 . -18) (undo-tree-id643 . -18) (undo-tree-id644 . -18) (undo-tree-id645 . -18) (undo-tree-id646 . -18) (undo-tree-id647 . -18) (undo-tree-id648 . -18) (undo-tree-id649 . -18) (undo-tree-id650 . -18) (undo-tree-id651 . -18) (undo-tree-id652 . -18) (undo-tree-id653 . -18) (undo-tree-id654 . -18) (undo-tree-id655 . -18) (undo-tree-id656 . -18) (undo-tree-id657 . -18) (undo-tree-id658 . -18) (undo-tree-id659 . -18) (undo-tree-id660 . -18) (undo-tree-id661 . -18) (undo-tree-id662 . -18) (undo-tree-id663 . -18) (undo-tree-id664 . -18) (undo-tree-id665 . -18) (undo-tree-id666 . -18) (undo-tree-id667 . -18) (undo-tree-id668 . -18) (undo-tree-id669 . -18) (undo-tree-id670 . -18) (undo-tree-id671 . -18) (undo-tree-id672 . -18) (undo-tree-id673 . -18) (undo-tree-id674 . -18) (undo-tree-id675 . -18) (undo-tree-id676 . -18) (undo-tree-id677 . -18) (undo-tree-id678 . -18) (undo-tree-id679 . -18) (undo-tree-id680 . -18) (undo-tree-id681 . -18) (undo-tree-id682 . -18) (undo-tree-id683 . -18) (undo-tree-id684 . -18) (undo-tree-id685 . -18) (undo-tree-id686 . -18) (undo-tree-id687 . -18) (undo-tree-id688 . -18) (undo-tree-id689 . -18) (undo-tree-id690 . -18) (undo-tree-id691 . -18) (undo-tree-id692 . -18) (undo-tree-id693 . -18) (undo-tree-id694 . -18) (undo-tree-id695 . -18) (undo-tree-id696 . -18) (undo-tree-id697 . -18) (undo-tree-id698 . -18) (undo-tree-id699 . -18) (undo-tree-id700 . -18) (undo-tree-id701 . -18) (undo-tree-id702 . -18) (undo-tree-id703 . -18) (undo-tree-id704 . -18) (undo-tree-id705 . -18) (undo-tree-id706 . -29) 1488) nil (25815 56901 321628 359000) 0 nil])
nil
